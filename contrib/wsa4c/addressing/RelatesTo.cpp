#include "RelatesTo.hpp" 
#include "RelationshipType.hpp"
#include "Constants.hpp"	

RelatesTo::RelatesTo()
{
    m_pRelationshipType = NULL;
}
	
RelatesTo::RelatesTo(AxisChar* pachUri)
:AttributedUri(Constants.RELATES_TO,pachUri)
{
}

void RelatesTo::setRelationshipType(RelationshipType * pRelationshipType)
{
    m_pRelationshipType = pRelationshipType;
}

RelatesTo::~RelatesTo()
{
    if(m_pRelationshipType != NULL)
        delete(m_pRelationshipType);
}

RelationshipType * RelatesTo::getRelationshipType()
{
    return m_pRelationshipType;
}

IHeaderBlock * RelatesTo::toSoapHeaderBlock(IMessageData *pIMsg)
{
   IHandlerSoapSerializer* pISZ;
	pIMsg->getSoapSerializer(&pISZ);

	IHeaderBlock* pIHeaderBlock= pISZ->createHeaderBlock();
    
	pIHeaderBlock->setLocalName(getLocalName());
    pIHeaderBlock->setUri(Constants.NS_URI_ADDRESSING);

    if(m_pRelationshipType != NULL)
        pIHeaderBlock->createAttribute(Constants.RELATIONSHIP_TYPE,"",m_pRelationshipType->getUri());
		        
	printf("in the WsaHandler::Invoke : %s\n");

	BasicNode* pBasicNode = pIHeaderBlock->createChild(CHARACTER_NODE);
	pBasicNode->setValue(getUri());
	
	pIHeaderBlock->addChild(pBasicNode);
    
    return pIHeaderBlock;
}













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
   
