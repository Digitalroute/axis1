#include "ServiceNameType.hpp"  
#include "Constants.hpp"

ServiceNameType::ServiceNameType()
{
	m_pachPortName = "\0";
}
ServiceNameType::~ServiceNameType()
{
	free(m_pachPortName);
}

ServiceNameType::ServiceNameType(const AxisChar* pachLocalName, const AxisChar* pachUri, const AxisChar* pachPortName)
:AttributedQName(pachLocalName,pachUri)
{
	free(m_pachPortName);
	m_pachPortName = (AxisChar*) malloc(strlen(pachPortName)+1);
	strcpy(m_pachPortName,pachPortName);

}

AxisChar * ServiceNameType::getPortName()
{
	return m_pachPortName;
}

void ServiceNameType::setPortName(AxisChar * pachPortName)
{
	free(m_pachPortName);
	m_pachPortName = (AxisChar*) malloc(strlen(pachPortName)+1);
	strcpy(m_pachPortName,pachPortName);
}

IHeaderBlock * ServiceNameType::toSoapHeaderBlock(IMessageData *pIMsg)
{
   	IHandlerSoapSerializer* pISZ;
	pIMsg->getSoapSerializer(&pISZ);

	IHeaderBlock* pIHeaderBlock= pISZ->createHeaderBlock();

	pIHeaderBlock->setLocalName(Constants.PORT_TYPE);
	pIHeaderBlock->setUri(Constants.NS_URI_ADDRESSING);
   		        
	printf("in the WsaHandler::Invoke : %s\n");	
    
	if(strlen(m_pachPortName)!=0){
    
		pIHeaderBlock->createAttribute(Constants.PORT_NAME,"",m_pachPortName);
	}

	BasicNode * pBasicNode = pIHeaderBlock->createChild(CHARACTER_NODE);
	pBasicNode->setValue(getQname());
	pIHeaderBlock->addChild(pBasicNode);

    return pIHeaderBlock;
}


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
   
