///////////////////////////////////////////////////////////////////////////////////
//This file is automatically generated by the Axis C++ Wrapper Class Generator
//Web service wrapper class's implementation generated by Axis WCG
//Parameters and wrapper methos to manipulate SOAPArrayStruct
////////////////////////////////////////////////////////////////////////////////////

#include "SOAPArrayStruct.h"
#include <axis/common/AxisWrapperAPI.h>

/////////////////////////////////////////////////////////////////////////////
// This static method serialize a SOAPArrayStruct type of object
//////////////////////////////////////////////////////////////////////
int Axis_Serialize_SOAPArrayStruct(SOAPArrayStruct* param, IWrapperSoapSerializer& pSZ, bool bArray = false)
{
	if (bArray)
	{
		pSZ << "<" << Axis_TypeName_SOAPArrayStruct << ">";
	}
	else
	{
		const AxisChar* sPrefix = pSZ.getNewNamespacePrefix();
		pSZ << "<" << Axis_TypeName_SOAPArrayStruct << " xsi:type=\"" << sPrefix <<":"
			<< Axis_TypeName_SOAPArrayStruct << "\" xmlns:" << sPrefix << "=\""
			<< Axis_URI_SOAPArrayStruct << "\">";
	}

	pSZ << pSZ.SerializeBasicType("varString", param->varString, XSD_STRING);
	pSZ << pSZ.SerializeBasicType("varInt", param->varInt, XSD_INT);
	pSZ << pSZ.SerializeBasicType("varFloat", param->varFloat, XSD_FLOAT);
	pSZ.SerializeArray((Axis_Array*)(&param->varArray),XSD_STRING, "varArray");

	pSZ << "</" << Axis_TypeName_SOAPArrayStruct << ">";
	return AXIS_SUCCESS;
}

/////////////////////////////////////////////////////////////////////////////
// This static method deserialize a SOAPArrayStruct type of object
//////////////////////////////////////////////////////////////////////
int Axis_DeSerialize_SOAPArrayStruct(SOAPArrayStruct* param, IWrapperSoapDeSerializer *pIWSDZ)
{
	param->varString = pIWSDZ->GetString();
	param->varInt = pIWSDZ->GetInt();
	param->varFloat = pIWSDZ->GetFloat();
	param->varArray.m_Size = pIWSDZ->GetArraySize();
	if (param->varArray.m_Size < 1) return AXIS_FAIL;
	param->varArray.m_Array = new string[param->varArray.m_Size];
	if (AXIS_SUCCESS != pIWSDZ->GetArray((Axis_Array*)(&param->varArray), XSD_STRING)) return AXIS_FAIL;
	return AXIS_SUCCESS;
}
void* Axis_Create_SOAPArrayStruct(bool bArray = false, int nSize=0)
{
	if (bArray && (nSize > 0))
		return new SOAPArrayStruct[nSize];
	else
		return new SOAPArrayStruct;
}

/////////////////////////////////////////////////////////////////////////////
// This static method delete a SOAPArrayStruct type of object
//////////////////////////////////////////////////////////////////////
void Axis_Delete_SOAPArrayStruct(SOAPArrayStruct* param, bool bArray = false, int nSize=0)
{
	if (bArray)
	{
		delete [] param;
	}
	else
	{
		delete param;
	}
}
/////////////////////////////////////////////////////////////////////////////
// This static method gives the size of SOAPArrayStruct type of object
//////////////////////////////////////////////////////////////////////
int Axis_GetSize_SOAPArrayStruct()
{
	return sizeof(SOAPArrayStruct);
}

SOAPArrayStruct::SOAPArrayStruct()
{
	varArray.m_Array = NULL;
	varArray.m_Size = 0;
}

SOAPArrayStruct::~SOAPArrayStruct()
{
	delete [] varArray.m_Array;
}

