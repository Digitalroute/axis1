<?xml version="1.0" encoding="Shift_JIS"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd">
<document>
  <header>
    <title>WebServices - Axis</title>
  </header>
  <body>

<a name="AxisSystemIntegrationGuide"/>
<section>
<title>Axis システム統合ガイド</title>

<p><i>バージョン 1.2</i><br/>
<i>フィードバック: <a href="mailto:axis-dev@ws.apache.org">axis-dev@ws.apache.org</a></i></p>

<a name="TableOfContents"/>
<section>
<title>目次</title>

<ul>
  <li><a href="#Introduction">はじめに</a></li>
  <li><a href="#PluggableAPIs">プラグイン可能な API</a></li>
  <ul>
    <li><a href="#Components">コンポーネント</a></li>
    <li><a href="#LoggingTracing">ロギング/トレーシング</a></li>
    <li><a href="#Configuration">設定</a></li>
    <li><a href="#Handlers">ハンドラ</a></li>
    <li><a href="#Internationalization">国際化</a></li>
    <li><a href="#PerformanceMonitoring">パフォーマンスモニタリング</a></li>
    <li><a href="#Encoding">エンコーディング</a></li>
    <li><a href="#WSDLParserAndCodeGeneratorFramework">WSDL パーサとコード生成器フレームワーク</a></li>
  </ul>
  <li><a href="#ClientSSL">クライアント SSL</a></li>
</ul>

</section>

<a name="Introduction"/>
<section>
<title>はじめに</title>

<p>このガイドの主な目的は、Axis を既存のWebアプリケーションサーバ、例えば Tomcat や WebSphere、に統合する方法を紹介することです。Axis にはそのような統合に必要なプラグイン可能な API が数多くあります。</p>

<p>有用な背景知識については<a href="architecture-guide.html">アーキテクチャガイド</a>で得られます。</p>

</section>

<a name="PluggableAPIs"/>
<section>
<title>プラグイン可能な API</title>

<p>以下は、Axis をWebアプリケーションサーバに統合するためのプラグイン可能なポイントです。最初の小節では、一般のプラグイン可能なコンポーネントのいくつかを解説しています。残りの小節で、その他のコンポーネントについて詳しく解説しています。</p>

<a name="Components"/>
<section>
<title>コンポーネント</title>

<p>この節では、様々なコンポーネントの特殊化を Axis にプラグインする方法全般について解説しています。</p>

<section>
<title>General Strategy</title>

<p>プラグイン可能なコンポーネントのデフォルトの動作を上書きするには以下のことを行います。</p>

<ul>
  <li>コンポーネントインターフェースの実装を開発します</li>
  <li>サービス定義ファイルを作成する (推奨) か、システムプロパティを設定することによって、Axis に実装クラスを定義します。
    <ul>
      <li><b>推奨:</b> サービス定義ファイルを作成するには以下のことを行います。
        <ul>
          <li>サービス定義ファイルの名前は、サービスが実装/拡張するインターフェース/抽象クラスに由来します。<br/>
            <code>/META-INF/services/&lt;コンポーネントパッケージ&gt;.&lt;インターフェース名&gt;</code></li>
          <li>サービス定義ファイルに、実装クラスの完全修飾名の1行を追加します</li>
        </ul>
      </li>
      <li>以下のようにシステムプロパティを設定します。
        <ul>
          <li>システムプロパティの名前はインターフェースの名前になります。</li>
          <li>システムプロパティの値は実装の名前になります。</li>
          <li>省略可能なシステムプロパティの名前 (下の表にあります) も利用することができます。</li>
          <li>システムプロパティを設定することは、特に J2EE やその他のアプリケーションホスティング環境ではお勧めできません。なぜならそれにより全てのアプリケーションに渡って命令を出すことになるからです。これは適切な行為かどうか分かりません。もしこれを行うのであれば、ウェブアプリケーションの実行時に行うべきではありません。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>実装クラスと、もし利用するのであればサービス定義ファイルを JAR ファイルに入れ、クラスローダ (CLASSPATH) から取り出せる場所に置きます。</li>
</ul>

</section>

<section>
<title>例 1</title>

<p>Java コンパイラのデフォルトの動作を上書きするには以下のことを行います。</p>

<ul>
  <li><code>Compiler</code> インターフェースの実装は既に <code>Jikes</code> コンパイラに提供されています。</li>
  <li>以下の行をサービス定義ファイルに追加します。<br/>
    <code>/META-INF/services/org.apache.axis.components.compiler.Compiler</code></li>
  <li>Add the following line to the service definition file:<br/>
    <code>org.apache.axis.components.compiler.Jikes</code></li>
  <li><code>org.apache.axis.components.compiler.Jikes</code> は Axis にパッケージ化されているので、しなくてはいけないことは、サービス定義ファイルがクラスローダからロードできることを確かめることだけです。</li>
</ul>

</section>

<section>
<title>例 2</title>

<p>リソースを適切に配置すること、あるいはロードすることが許されていない環境や、ある動作を特定の実装に強制させる必要がある環境において、SocketFactory のデフォルトの動作を上書きするには以下のことを行います。</p>

<ul>
  <li><code>SocketFactory</code> インターフェースの実装を提供します。例えば次のようになります。<code>your.package.YourSocketFactory</code></li>
  <li>次の名前をもつシステムプロパティに<br/>
    <code>org.apache.axis.components.net.SocketFactory</code><br/>
    次の値を設定します。<br/>
    <code>your.package.YourSocketFactory</code><br/><br/>
    これは以下の JVM コマンドラインを利用して行うことができます。<br/>
    <code>-Dorg.apache.axis.components.net.SocketFactory=your.package.YourSocketFactory</code></li>
  <li>実装クラスがクラスローダによってロードできるか確かめてください。</li>
</ul>

</section>

<section>
<title>リファレンス</title>

<p>(コンポーネント/パッケージ: org.apache.axis.components.*)</p>

<table>

<tr>
  <th>コンポーネントパッケージ</th>
  <th>ファクトリ</th>
  <th>インターフェース</th>
  <th>省略可能なシステムプロパティ</th>
  <th>デフォルトの実装</th>
</tr>

<tr>
  <td>compiler</td>
  <td>CompilerFactory getCompiler()</td>
  <td>Compiler</td>
  <td>axis.Compiler</td>
  <td>Javac</td>
</tr>

<tr>
  <td>image</td>
  <td>ImageIOFactory getImageIO()</td>
  <td>ImageIO</td>
  <td>axis.ImageIO</td>
  <td>MerlinIO, JimiIO, JDK13IO</td>
</tr>

<tr>
  <td>jms</td>
  <td>JMSVendorAdapterFactory getJMSVendorAdapter()</td>
  <td>JMSVendorAdapter</td>
  <td></td>
  <td>JNDIVendorAdapter</td>
</tr>

<tr>
  <td>net</td>
  <td>SocketFactoryFactory getFactory()</td>
  <td>SocketFactory</td>
  <td>axis.socketFactory</td>
  <td>DefaultSocketFactory</td>
</tr>

<tr>
  <td>net</td>
  <td>SocketFactoryFactory getSecureFactory()</td>
  <td>SecureSocketFactory</td>
  <td>axis.socketSecureFactory</td>
  <td>JSSESocketFactory</td>
</tr>
</table>

<!--
<h3><a name="System Management Plug"></a>System Management</h3>
What points are necessary to manage Axis?
<ul>
  <li>Justification/Rationale - why is this plug point necessary? Spec compliance?</li>
  <li>Interfaces</li>
  <li>Mechanism</li>
  <ul>
    <li>Life cycle</li>
    <li>Exception handling - in general; plug-in shouldn't throw any exceptions - does runtime ignore? Log?)</li>
    <li>Multiple thread support? Ie., is synchronization required?</li>
  </ul>
  <li>Configuration/reconfiguration</li>
  <li>Default behavior if not plugged.</li>
  <li>Example</li>
</ul>
-->

</section>

</section>

<a name="LoggingTracing"/>
<section>
<title>ロギング/トレーシング</title>

<p>Axis のロギングとトレーシングは <a href="http://jakarta.apache.org/commons/index.html">Jakarta Commons</a> [英語] プロジェクトの Logging コンポーネント、つまり Jakarta Commons Logging (JCL) SPI に基づいています。JCL は、<a href="http://jakarta.apache.org/log4j/docs/index.html">Log4J</a> [英語]、<a href="http://jakarta.apache.org/avalon/logkit/index.html">Avalon LogKit</a> [英語]、JDK 1.4 を含むその他のロギングツール用に、薄いラッパと共に Log インターフェースを提供しています。このインターフェースは Log4J と LogKit に密接にマッピングします。</p>

<section>
<title>正当化/原理</title>

<p>プラグイン可能なロギング/トレース機構により、Axis はロギング/トレースメッセージをホストであるWebアプリケーションサーバのロギング機構に流すことができます。単一の設定/制御を持った中央ロギング機構は、Webアプリケーションサーバに統合される多数のミドルウェアコンポーネントのそれぞれのための個別のロギング機構よりも優れています。</p>

</section>

<section>
<title>統合</title>

<p>他のロガーとの統合に最低限必要なことは、<span class="codefrag">org.apache.commons.logging.Log</span> インターフェースの実装を提供することです。さらに、ロガーに接続するため、またはロガーをインスタンス化するための特定の要件を満たすために、<span class="codefrag">org.apache.commons.logging.LogFactory</span> インターフェースの実装も提供します。</p>

<ul>
  <li><b>org.apache.commons.logging.Log</b>
    <p><span class="codefrag">Log</span> インターフェースは、ログ/トレースメッセージをログに書き込むために利用する以下のメソッドを定義しています。</p>
    <source>  log.fatal(Object message);
  log.fatal(Object message, Throwable t);
  log.error(Object message);
  log.error(Object message, Throwable t);
  log.warn(Object message);
  log.warn(Object message, Throwable t);
  log.info(Object message);
  log.info(Object message, Throwable t);
  log.debug(Object message);
  log.debug(Object message, Throwable t);
  log.trace(Object message);
  log.trace(Object message, Throwable t);

  log.isFatalEnabled();
  log.isErrorEnabled();
  log.isWarnEnabled();
  log.isInfoEnabled();
  log.isDebugEnabled();
  log.isTraceEnabled();</source>
    <p>これらのメソッドのセマンティックスには、メッセージの重要度が最高から最低へと順序付けられている、というのがあります。</p>
    <ul>
      <li>fatal - コンソールとシステムログにログを書き込むものとする。</li>
      <li>error - コンソールとシステムログにログを書き込むものとする。</li>
      <li>warn - コンソールとシステムログにログを書き込むものとする。</li>
      <li>info - コンソールとシステムログにログを書き込むものとする。</li>
      <li>debug - 可能であればシステムログにログを書き込む。</li>
      <li>trace - 可能であればシステムログにログを書き込む。</li>
    </ul>
  </li>
  <li><b>org.apache.commons.logging.LogFactory</b>
    <p>必要に応じて、<span class="codefrag">org.apache.commons.logging.LogFactory</span> インターフェースのデフォルトの実装を上書きすることができます。これにより JDK 1.3 Service Provider 発見処理は、アプリケーションの必要に応じて指定した LogFactory を設置したり作成したりすることができるようになります。詳細については <span class="codefrag">LogFactoryImpl.java</span> の Javadoc をご覧下さい。</p>
  </li>
</ul>

</section>

<section>
<title>機構</title>

<ul>
  <li><b>ライフサイクル</b>
    <p>JCL LogFactory 実装は、ロギングツールキットへの接続/切断、あるいはロギングツールキットのインスタンス化/初期化/破棄のいずれかに対する責任があることを前提とするべきです。</p>
  </li>
  <li><b>例外処理</b>
    <p>JCL Log インターフェースは処理すべき例外を1つも指定していません。この実装はいかなる例外も catch する必要があります。</p>
  </li>
  <li><b>複数スレッド</b>
    <p>JCL Log と LogFactory 実装は、ロギングツールキットが必要としている同期化を全て満足するようにしなければなりません。</p>
  </li>
</ul>

</section>

<section>
<title>ロガー設定</title>

<ul>
  <li><b>Log</b>
    <p>JCL によって提供されるデフォルトの <span class="codefrag">LogFactory</span> は、プロパティ <span class="codefrag">org.apache.commons.logging.Log</span> を設定することにより <span class="codefrag">org.apache.commons.logging.Log</span> インターフェースの特定の実装をインスタンス化するように設定することができます。このプロパティはシステムプロパティか、CLASSPATH に存在している必要がある <span class="codefrag">commons-logging.properties</span> ファイルによって指定することができます。</p>
  </li>
  <li><b>プラグインされていない場合のデフォルトのロガー</b>
    <p>Jakarta Commons Logging SPI はシステムプロパティ <span class="codefrag">org.apache.commons.logging.Log</span> によって指定された <span class="codefrag">org.apache.commons.logging.Log</span> インターフェースの実装を利用します。もしこのプロパティが指定されていない場合、あるいはそのクラスが利用できない場合、JCL は CLASSPATH 中で、以下のツールキットを望ましい順に検索することによって、デフォルトのロギングツールキットにアクセスします。</p>
    <ul>
      <li><a href="http://jakarta.apache.org/log4j/docs/index.html">Log4J</a> [英語] </li>
      <li>JDK 1.4</li>
      <li>JCL SimpleLog</li>
    </ul>
  </li>
</ul>

</section>

</section>

<a name="Configuration"/>
<section>
<title>設定</title>

<p>Axis が利用する内部データモデルは、Axis 特有のデータモデルである Web Services Deployment Descriptor (WSDD) に基づいています。Axis は初期時は <span class="codefrag">org.apache.axis.EngineConfiguration</span> のインスタンスから、サービスの WSDD 情報を取得します。</p>

<p>EngineConfiguration は <span class="codefrag">org.apache.axis.EngineConfigurationFactory</span> インターフェースの実装によって提供されます。これは現在のところクライアント設定とサーバ設定を返すメソッドを提供しています。</p>

<p>ここでは <span class="codefrag">EngineConfigurationFactory</span> の実装クラスを定義する方法に焦点を合わせます。</p>

<ul>
  <li>正当化/原理
    <p>Axis の一般的な利用においてはデフォルトの動作で十分ですが、Axis を既存のアプリケーションサーバに統合するには別のデプロイモデルが必要とされます。EngineConfigurationFactory のカスタマイズされた実装は、ホストデプロイモデルから Axis 内部デプロイモデルにマッピングします。</p>
  </li>
  <li>機構
    <p>設定情報を手に入れるため、また Axis を初期化するために利用される、関連する一連の説明は以下の通りです。</p>
    <source>EngineConfigurationFactory factory = EngineConfigurationFactoryFinder(someContext);
EngineCongfiguration config = factory.getClientEngineConfig();
AxisClient = new AxisClient(config);</source>
    <p>詳細は様々です (サーバ対クライアント、他のファクトリが関わっているかどうか等)。とにかくポイントは、統合コードは <span class="codefrag">EngineConfigurationFactoryFinder(someContext)</span> を呼ぶ責任があり、その結果を確実に Axis に渡すということです。<span class="codefrag">someContext</span> は、利用される適切な EngineConfigurationFactory の実装 (もしあれば) をファクトリファインダが設置する方法、の鍵となります。</p>
    <p>EngineConfigurationFactoryFinder は以下のように機能します。</p>
    <ul>
      <li><code>org.apache.axis.EngineConfigurationFactory</code> を実装するクラスのリストを以下の順で取得します
        <ul>
          <li>システムプロパティ <span class="codefrag">axis.EngineConfigFactory</span> の値。</li>
          <li>システムプロパティ <span class="codefrag">org.apache.axis.EngineConfigurationFactory</span> の値。</li>
          <li><code>META-INF/services/org.apache.axis.EngineConfigurationFactory</code> という名前の全てのリソースを設置します。そのようなリソースの各行は、そのインターフェースを実装するクラスの名前を識別します ('#' のコメントから、最終行まで)。</li>
          <li><code>org.apache.axis.configuration.EngineConfigurationFactoryServlet</code></li>
          <li><code>org.apache.axis.configuration.EngineConfigurationFactoryDefault</code></li>
        </ul>
      </li>
      <li>EngineConfigurationFactory を実装するクラスは以下のメソッドを提供することが求められています。<br/>
        <code>public static EngineConfigurationFactory newFactory(Object)</code><br/>
        このメソッドはパラメータとして <span class="codefrag">someContext</span> を渡されて呼ばれます。</li>
      <li><span class="codefrag">newFactory</span> メソッドは <span class="codefrag">someContext</span> パラメータをチェックすることが求められています。このチェックは、someContext がクラスにとって意味があるのか (最低限、それが求められている型やクラスであるか検証します) を決めるため、さらには、全体的な実行環境を検査するために行われます。もし EngineConfigurationFactory が必要とする情報をその環境が提供できるのであれば、<span class="codefrag">newFactory()</span> はそのファクトリのインスタンスを返します。さもなければ <span class="codefrag">newFactory()</span> は null を返さなければなりません。</li>
      <li>EngineConfigurationFactoryFinder はそれが手に入れる null でない最初のファクトリを返します。</li>
    </ul>
  </li>
  <li>デフォルトの動作
    <p>上記で説明したように、デフォルトの動作は実装クラスのリストの最後の2つの要素によって提供されます。</p>
    <ul>
      <li><code>org.apache.axis.configuration.EngineConfigurationFactoryServlet</code>
        <p><span class="codefrag">newFactory(obj)</span> が呼ばれます。もし <span class="codefrag">obj instanceof javax.servlet.ServletContext</span> が true であれば、このクラスのインスタンスが返されます。</p>
        <p>デフォルトの Servlet ファクトリはサーバとして機能することが想定されています (クライアントとしてでは、間違って現在の作業ディレクトリから WSDD ファイル <span class="codefrag">client-config.wsdd</span> をロードしようとします)。</p>
        <p>デフォルトの Servlet ファクトリはWebアプリケーションリソースである <span class="codefrag">/WEB-INF/server-config.wsdd</span> をオープンします (このファイル名はシステムプロパティ <span class="codefrag">axis.ServerConfigFile</span> により変更することができます。)。</p>
        <ul>
          <li>もしこのファイルがアクセス可能なファイルとして存在している (すなわち JAR/WAR ファイルではない) のであれば、それをファイルとしてオープンします。もし変更が Admin ツールにより許されていて、Admin ツールにより変更が行われたら、変更が保存されます。</li>
          <li>それがファイルとして存在しなければ、リソースストリームとしてアクセスを試みます (getResourceAsStream)。これは JAR/WAR ファイル内容に対して機能します。</li>
          <li>もしリソースが単純に利用できなければ、それをファイルとして作成しようと試みます。</li>
          <li>上記全ての試みが失敗したら、最後の試みとして、<span class="codefrag">org.apache.axis.server.server-config.wsdd</span> にデータストリームとしてアクセスします。</li>
        </ul>
      </li>
      <li><code>org.apache.axis.configuration.EngineConfigurationFactoryDefault</code>
        <p><span class="codefrag">newFactory(obj)</span> が呼ばれます。もし <span class="codefrag">obj</span> が null であればこのクラスのインスタンスが返されます。デフォルトではないファクトリを必要とするのであれば null でない <span class="codefrag">obj</span> を与えてください。</p>
        <p>デフォルトのファクトリは必要に応じて WSDD ファイル <span class="codefrag">client-config.wsdd</span> あるいは <span class="codefrag">server-config.wsdd</span>を現在の作業ディレクトリからロードします。これらのファイル名はそれぞれシステムプロパティ <span class="codefrag">axis.ClientConfigFile</span> と <span class="codefrag">axis.ServerConfigFile</span> により変わる可能性があります。</p>
      </li>
    </ul>
  </li>
</ul>

</section>

<a name="Handlers"/>
<section>
<title>ハンドラ</title>

<p>ハンドラに関する現在の情報は <a href="architecture-guide.html">アーキテクチャガイド</a> をご覧下さい。</p>

</section>

<a name="Internationalization"/>
<section>
<title>国際化</title>

<p>Axis は次の2つ両方を提供することにより国際化をサポートしています。1つめは Axis で利用される文字列のプロパティファイルです。2つめは、内部の Axis メッセージへのアクセスと、既存の Axis コードに基づく統合コードから利用できるメッセージの拡張とを容易にする拡張メカニズムです。</p>

<section>
<title>変換</title>

<ul>
  <li>正当化/原理
    <p>英語以外の言語を使う人に Axis を気に入ってもらうために、Axis で利用される文字列を変換する機構を提供しています。Axis ではいかなる変換も提供せず、単に、変換を行う人が簡単に変換をプラグインできる方法を提供しています。</p>
  </li>
  <li>機構
    <p>Axis は英語メッセージを org.apache.axis.i18n.resource.properties (ソースツリーの中では、このファイル名は xml-axis/java/src/org/apache/axis/i18n/resource.properties です) という名前の Java リソースで提供しています。</p>
    <p>Axis は Java 国際化機構を利用しています。それは、プロパティファイルで支えられている java.util.ResourceBundle と、パラメータをメッセージテキストに置換する java.text.MessageFormat クラスです。</p>
    <ul>
      <li>java.util.ResourceBundle はプログラムで提供されたキーを利用して、プロパティファイルからメッセージテキストを取り出します。メッセージリソースファイルの中のエントリーは &lt;key&gt;=&lt;message&gt; という形式です。</li>
      <li>java.text.MessageFormat はメッセージテキスト中の目印のついた変数を置換します。目印は、<span class="codefrag">X</span> が0から始まる変数の数を表す "{X}" という文法を利用します。</li>
    </ul>
    <p>例: <span class="codefrag">myMsg00=My {0} is {1}.</span></p>
    <p>変換は、対象言語のために Axis が提供するプロパティファイルの別のバージョンの作成を必要とします。<span class="codefrag">java.utils.ResourceBundle</span> の JavaDoc は、異なるロケールに対する異なるプロパティファイルを識別する方法の詳細を扱っています。</p>
    <p>Axis の国際化ツールの利用に関する詳細は<a href="developers-guide.html">開発者ガイド</a>をご覧下さい</p>
  </li>
  <li>デフォルトの動作
    <p>デフォルトの動作 (つまり指定されたロケールの変換ファイルが存在しない場合に何が起こるかを意味しています) は英語のプロパティファイルに戻されることです。このファイルが存在しなければ (何かが著しくおかしくない限り起こりえませんが) Axis は英語の理由メッセージ付きの例外を投げます。</p>
  </li>
</ul>

</section>

<section>
<title>メッセージファイルの拡張</title>

<p>Axis は、Axis に基づくコードが Axis メッセージキーと同様に、拡張コードに対して唯一の新しいメッセージキーを利用できる、メッセージファイル拡張機構を提供しています。</p>

<ul>
  <li>正当化/原理
    <p>Axis は様々な Axis エンティティに対してプラグイン可能なインターフェース (EngineConfigurationFactory、プロバイダ、ハンドラを含む) を提供しています。また、Axis はこれらのエンティティに対して様々な実装も提供しています。この実装の Axis ソースコードを、エンドユーザの独自のニーズを満たす拡張やカスタマイズを開発するための出発点として利用すると便利です。</p>
  </li>
  <li>手順
    <p>Axis メッセージファイルを拡張するには以下のことを行います。</p>
    <ul>
      <li>Axis ソースファイル <span class="codefrag">java/src/org/apache/axis/i18n/Messages.java</span> をあなたの project/package、ここでは <span class="codefrag">my/project/package/path/Messages.java</span>とします、にコピーします。
        <ul>
          <li>コピーしたファイルの <span class="codefrag">package</span> 宣言に正しいパッケージ名を設定します。</li>
          <li>プライベート属性 <span class="codefrag">projectName</span> を <span class="codefrag">"my.project"</span> に設定します。これはあなたのプロジェクトで共通のパッケージ名の一部です。<span class="codefrag">projectName</span> はコピーした Message パッケージ名と同じかその接頭辞である必要があります。</li>
        </ul>
      </li>
      <li><span class="codefrag">my/project/package/path/resource.properties</span> ファイルを生成します。このファイルに新しいメッセージのキー/値の組を追加します。</li>
      <li>Axis ソースファイルをあなたのプロジェクトにコピーしたら、<span class="codefrag">import org.apache.axis.i18n.Messages</span> 文を <span class="codefrag">import my.project.package.path.Messages</span> に変更します。</li>
      <li><a href="developers-guide.html">開発者ガイド</a>で述べられているように、新しいメッセージにアクセスするには Message クラスで提供されているメソッドを使用します。</li>
    </ul>
  </li>
  <li>動作
    <ul>
      <li>ローカル検索
        <p><span class="codefrag">Messages</span> は自身のパッケージ (Messages) の中にある <span class="codefrag">resources.properties</span> リソース内で キーの値を検索し始めます。</p>
      </li>
      <li>階層検索
        <p>もし <span class="codefrag">Messages</span> がキーもリソースファイルも見つけられなければ、見つけるまでパッケージ階層を上っていきます。階層の頂点、つまりその上は検索しない場所、は <span class="codefrag">projectName</span> 属性で定義します (先ほど設定しました)。</p>
      </li>
      <li>デフォルトの動作
        <p>もしパッケージ階層でキーが見つけられなければ、デフォルトリソースが利用されます。デフォルトの動作はあなたの拡張ディレクトリにコピーした <span class="codefrag">Messages</span> クラスの <span class="codefrag">parent</span> 属性で決定されます。</p>
        <p>変更していない限り、デフォルトの動作 (新しいプロパティファイル内でキーが定義されていない時になにが起こるかを意味しています) は、Axis プロパティファイル (org.apache.axis.i18n.resource.properties) に戻ることです。</p>
      </li>
    </ul>
  </li>
</ul>

</section>

</section>

<a name="PerformanceMonitoring"/>
<section>
<title>パフォーマンスモニタリング</title>

<p>Axis は今のところ特定のパフォーマンスモニタリングプラグインを持っていません。</p>

<!--
<ul>
  <li>Justification/Rationale - why is this plug point necessary? Spec compliance?</li>
  <li>Interfaces</li>
  <li>Mechanism</li>
  <ul>
    <li>Life cycle</li>
    <li>Exception handling - in general; plug-in shouldn't throw any exceptions - does runtime ignore? Log?)</li>
    <li>Multiple thread support? Ie., is synchronization required?</li>
  </ul>
  <li>Configuration/reconfiguration</li>
  <li>Default behavior if not plugged.</li>
  <li>Example</li>
</ul>
-->

</section>

<a name="Encoding"/>
<section>
<title>エンコーディング</title>

<p>Axis は今のところエンコーディングプラグインを持っていません。</p>

<!--
How can a system integrator plug in other encoding mechanisms such as SOAP 1.2 or optimized XML-based encoding?
<ul>
  <li>Justification/Rationale - why is this plug point necessary? Spec compliance?</li>
  <li>Interfaces</li>
  <li>Mechanism</li>
  <ul>
    <li>Life cycle</li>
    <li>Exception handling - in general; plug-in shouldn't throw any exceptions - does runtime ignore? Log?)</li>
    <li>Multiple thread support? Ie., is synchronization required?</li>
  </ul>
  <li>Configuration/reconfiguration</li>
  <li>Default behavior if not plugged.</li>
  <li>Example</li>
</ul>
-->

</section>

<a name="WSDLParserAndCodeGeneratorFramework"/>
<section>
<title>WSDL パーサとコード生成器フレームワーク</title>

<p>WSDL2Java は WSDL から Java 加工物を生成するための Axis のツールです。このツールには拡張性があります。もし Axis のユーザが Axis を拡張させたいのであれば、生成された加工物も拡張、あるいは変更する必要があります。例えば、もし Axis が、Axis のデプロイモデルと異なる既存のデプロイモデルを持つ製品に挿入されたら、その製品の WSDL2Java バージョンは Axis の deploy.wsdd と異なるデプロイメントディスクリプタを生成する必要があります。</p>

<p>これ以降はフレームワークの説明に移ります。もし代わりに <a href="#WSDL%20Examples">examples</a> [リンク切れ] の泥の中に飛び込めば、それらから多くのことを学べるでしょう。その後ここに戻ってくれば流血場面の詳しい描写を知ることができます。</p>

<p>WSDL2Java は3部から構成されています。</p>

<ol>
  <li>シンボルテーブル</li>
  <li>パーサフロントエンドと生成器フレームワーク</li>
  <li>コード生成器バックエンド (WSDL2Java 自身)</li>
</ol>

<section>
<title>シンボルテーブル</title>

<p>org.apache.axis.wsdl.symbolTable にあるシンボルテーブルは、WSDL ドキュメントからの全てのシンボル、つまり WSDL 構造自身 (portType、binding 等) からのシンボルと、WSDL が参照する XML スキーマ型の両方を持っています。</p>

<p>注意: ここにたくさんの説明が必要です。</p>

<p>シンボルテーブルは拡張可能ではありませんが、動的変数構造を利用してシンボルテーブルにフィールドを追加することは<b>できます</b>。</p>

<ul>
  <li>動的変数キーには定数オブジェクトが必要です。例: public static final String MY_KEY = "my key";</li>
  <li>その変数の値を GeneratorFactory.generatorPass に設定します: entry.setDynamicVar(MY_KEY, myValue);</li>
  <li>生成器内の変数の値を取得します: Object myValue = entry.getDynamicVar(MY_KEY);</li>
</ul>

</section>

<section>
<title>パーサフロントエンドと生成器フレームワーク</title>

<p>パーサフロントエンドと生成器フレームワークは in org.apache.axis.wsdl.gen にあります。パーサフロントエンドは2つのファイルから構成されています。</p>

<ul>
  <li>Parser
    <source>public class Parser {
  public Parser();
  public boolean isDebug();
  public void setDebug(boolean);
  public boolean isImports();
  public void setImports(boolean);
  public boolean isVerbose();
  public void setVerbose(boolean);
  public long getTimeout();
  public void setTimeout(long);
  public java.lang.String getUsername();
  public void setUsername(java.lang.String);
  public java.lang.String getPassword();
  public void setPassword(java.lang.String);
  public GeneratorFactory getFactory();
  public void setFactory(GeneratorFactory);
  public org.apache.axis.wsdl.symbolTable.SymbolTable getSymbolTable();
  public javax.wsdl.Definition getCurrentDefinition();
  public java.lang.String getWSDLURI();
  public void run(String wsdl) throws java.lang.Exception;
  public void run(String context, org.w3c.dom.Document wsdlDoc)
    throws java.io.IOException, javax.wsdl.WSDLException;
}</source>
    <p>このクラスの基本的な動作は単純です。Parser をインスタンス化して実行するだけです。</p>
    <source>Parser parser = new Parser();
parser.run("myfile.wsdl");</source>
    <p>パーサにはアクセッサメソッドを持った様々なオプションがあります。</p>
    <ul>
      <li>debug - デフォルトは false - WSDL ファイルのパース後にシンボルテーブルをダンプする</li>
      <li>imports - デフォルトは true - インポートファイルを訪れるかどうか</li>
      <li>verbose - デフォルトは false - パース中にそれぞれのファイルをリストアップする</li>
      <li>timeout - デフォルトは 45 - パースを停止する前に待つ秒数</li>
      <li>username - デフォルトなし - protected URI のために必要</li>
      <li>password - デフォルトなし - protected URI のために必要</li>
    </ul>
    <p>パーサのその他のメソッド</p>
    <ul>
      <li>get/setFactory - このパーサの GeneratorFactory を取得、あるいは設定する - 詳細については下をご覧下さい。デフォルトの生成器ファクトリは NoopFactory で、これはなにも生成しません。</li>
      <li>getSymbolTable - 一度 run メソッドが呼ばれると、シンボルテーブルが住みつき、クエリーすることができるようになります。</li>
      <li>getCurrentDefinition - 一度 run メソッドが呼ばれると、パーサは与えられた wsdl ファイルを表す Definition オブジェクトを持つようになります。Definition は WSDL4J オブジェクトです。</li>
      <li>getWSDLURI - 文字列を引数に取る run メソッドが一度呼ばれると、パーサは WSDL ファイルの場所を示す文字列を持つようになります。その他の run メソッド - run(String context, Document wsdlDoc) - は wsdl ファイルの場所を提供しないことに注意してください。この run メソッドが使用されると getWSDLURI は null になります。</li>
      <li>2つの run メソッドがあります。1つめは上で示した通り、WSDL ファイルの場所を表す URI 文字列を引数に取るメソッドです。もしすでに WSDL ファイルを XML Document にパースしているのであれば、コンテキストと WSDL Document を引数に取る2つめのメソッドを使用することができます。</li>
    </ul>
    <p>このクラスの拡張は ...</p>
    <p>注意: この言葉を続けてください ...</p>
  </li>

  <li>WSDL2
    <p>Parser は、WSDL パーサ内の、プログラムに従ったインターフェースです。WSDL2 は WSDL パーサのためのコマンドラインツールです。WSDL2 はコマンドラインから Parser を呼ぶための拡張可能なフレームワークを提供しています。WSDL2 の拡張は <b>WSDL2</b>Java、<b>WSDL2</b>Lisp、<b>WSDL2</b>XXX のように WSDL2 で始まるので WSDL2 という名前がつけられました。</p>
    <source>public class WSDL2 {
  protected WSDL2();
  protected Parser createParser();
  protected Parser getParser();
  protected void addOptions(org.apache.axis.utils.CLOptionDescriptor[]);
  protected void parseOption(org.apache.axis.utils.CLOption);
  protected void validateOptions();
  protected void printUsage();
  protected void run(String[]);
  public static void main(String[]);
}</source>
    <p>優れたコマンドラインツールと同じように、WSDL2 には main メソッドがあります。しかしながら、いくつかのコマンドラインツールと違い、WSDL2 のメソッドは static ではありません。static メソッドには拡張性がありません。static メソッドを呼ぶ替わりに、WSDL2 の main メソッドは自身のインスタンスを生成し、そのインスタンスのメソッドを呼びます。これらのメソッドはある動作パターンに従います。main メソッドはとても単純です。</p>
    <source>public static void main(String[] args) {
  WSDL2 wsdl2 = new WSDL2();
  wsdl2.run(args);
}</source>
    <p>WSDL2 のコンストラクタは createParser を呼び、Parser や Parser の拡張を構築します。</p>
    <p>run は以下のものを呼びます。</p>
    <ul>
      <li>parseOption。各コマンドラインオプションをパースし、適切な Parser アクセッサを呼びます。例えばこのメソッドが --verbose をパースした際は parser.setVerbose(true) を呼びます。</li>
      <li>validateOptions。全てのオプション値に一貫性があるか確かめます。</li>
      <li>printUsage。このツールの使い方が間違っていた場合。</li>
      <li>parser.run(args);</li>
    </ul>
    <p>もし拡張されたものに追加されたオプションがあれば、run を呼ぶ前に addOptions を呼ぶことが求められています。それにより拡張されたものは必要に応じて getParser、addOptions、run を呼びます。拡張されたものは必要に応じて createParser、parseOption、validateOptions、printUsage を上書きします。</p>
    <p>生成器フレームワークは2つのファイルから構成されます。</p>
    <ul>
      <li>Generator
        <p>Generator インターフェースはとても単純です。単に generate メソッドを定義しています。</p>
        <source>public interface Generator
{
  public void generate() throws java.io.IOException;
}</source>
      </li>
      <li>GeneratorFactory
        <source>public interface GeneratorFactory
{
  public void generatorPass(javax.wsdl.Definition, SymbolTable);
  public Generator getGenerator(javax.wsdl.Message, SymbolTable);
  public Generator getGenerator(javax.wsdl.PortType, SymbolTable);
  public Generator getGenerator(javax.wsdl.Binding, SymbolTable);
  public Generator getGenerator(javax.wsdl.Service, SymbolTable);
  public Generator getGenerator(TypeEntry, SymbolTable);
  public Generator getGenerator(javax.wsdl.Definition, SymbolTable);
  public void setBaseTypeMapping(BaseTypeMapping);
  public BaseTypeMapping getBaseTypeMapping();
}</source>
        <p>GeneratorFactory インターフェースは生成器を取得するためにパーサが利用するメソッドを定義しています。WSDL 構造それぞれ (message、portType 等 - これらは WSDL4J のクラスである javax.xml.Message、javax.xml.PortType 等に依存していることに注意してください) の生成器、スキーマ型の生成器、WSDL Definition 自身の生成器が必要です。この最後の生成器は前述のカテゴリに収まらないものを生成するのに利用されます。</p>
        <p>getGeneratorMethod に加え、GeneratorFactory は generatorPass メソッドを定義しています。このメソッドはファクトリ実装に、実際の生成が始まる前に前処理を行うためにシンボルテーブルを歩き回る機会を与えます。</p>
        <p>基本型マッピングのアクセッサも定義されています。これらは QName を与えられたターゲットマッピング内の基本型に変換するのに利用されます。</p>
      </li>
    </ul>
    <p>Parser、WSDL2、Generator、GeneratorFactory に加え、org.apache.axis.wsdl.gen パッケージもいくつかの操作のないクラス、NoopGenerator と NoopFactory を持っています。NoopGenerator は、全ての WSDL 構造に対して加工物を生成する必要がない拡張にとって便利なクラスです。例えば、WSDL2Java は message に対して何も生成しませんので、message ファクトリの getGenerator(Message, SymbolTable) メソッドは NoopGenerator を返します。NoopFactory は全ての getGenerator メソッドに対して NoopGenerator を返します。Parser のデフォルトのファクトリは NoopFactory です。</p>
  </li>
</ul>

</section>

<section>
<title>コード生成器バックエンド</title>

<p>WSDL2Java バックエンド生成器の要点は org.apache.axis.wsdl.toJava にあります。Emitter は Parser を拡張しています。org.apache.axis.wsdl.WSDL2Java は WSDL2 を拡張しています。JavaGeneratorFactory は GeneratorFactory を実装しています。様々な JavaXXXWriter クラスは Generator インターフェースを実装しています。</p>

<p>注意: ここにもっと説明が必要...</p>

</section>

<section>
<title>WSDL フレームワーク拡張例</title>

<p>上記全てはいくぶん複雑に聞こえます。実際複雑ですが、それはあたなの拡張が複雑であるべきだということを意味していません。</p>

</section>

<section>
<title>例 1 - WSDL2Java の簡単な拡張 - 付加的な加工物</title>

<p>このフレームワークの最も簡単な拡張は、WSDL2Java が既に生成したもの全てと、さらに何か新しいものを生成する拡張です。例1はそのような拡張です。余分な加工物は、サービスの port をリストアップする、各サービスのファイルです。これを作成する理由はありませんが、簡単でよい例となるでしょう。この例の完全な実装については samples/integrationGuide/example1 をご覧下さい。</p>

<ul>
  <li>まず最初に新しい加工物を書き出す writer を作成する必要があります。この新しいクラスは org.apache.axis.wsdl.toJava.JavaWriter を拡張します。JavaWriter はその拡張に対して動作を指示します。JavaWriter は writeFileHeader と writeFileBody を呼びます。この例ではファイルヘッダを気にしないので、writeFileHeader は操作のないメソッドです。writeFileBody がこの writer の実際の作業を行います。
    <source>public class MyListPortsWriter extends JavaWriter {
  private Service service;
  public MyListPortsWriter(
      Emitter emitter,
      ServiceEntry sEntry,
      SymbolTable symbolTable) {
    super(emitter,
          new QName(
            sEntry.getQName().getNamespaceURI(),
            sEntry.getQName().getLocalPart() + "Lst"),
          "",
          "lst",
          "Generating service port list file",
          "service list");
    this.service = sEntry.getService();
  }
  protected void writeFileHeader() throws IOException {
  }
  protected void writeFileBody() throws IOException {
    Map portMap = service.getPorts();
    Iterator portIterator = portMap.values().iterator();

    while (portIterator.hasNext()) {
      Port p = (Port) portIterator.next();
      pw.println(p.getName());
    }
    pw.close();
  }
}</source>
  </li>
  <li>次に main プログラムが必要です。この main プログラムは WSDL2Java を拡張することによって、WSDL2Java の全ての機能を利用することができます。このツールは主に3つのことを行います。
    <ul>
      <li>自身をインスタンス化します。</li>
      <li>WSDL service の生成器のリストに MyListPortsWriter を追加します。</li>
      <li>run メソッドを呼びます。</li>
    </ul>
    <p>これで全てです。基本ツールが残りの作業全てを行ってくれます。</p>
    <source>public class MyWSDL2Java extends WSDL2Java {

  public static void main(String args[]) {
    MyWSDL2Java myWSDL2Java = new MyWSDL2Java();

    JavaGeneratorFactory factory =
        (JavaGeneratorFactory) myWSDL2Java.getParser().getFactory();
    factory.addGenerator(Service.class, MyListPortsWriter.class);

    myWSDL2Java.run(args);
  }
}</source>
  </li>
</ul>

</section>

<section>
<title>例 2 - それほど簡単ではない WSDL2Java の拡張 - 加工物の変更</title>

<p>この例では deploy.wsdd を mydeploy.useless に置き換えます。簡単に言うと、mydeploy.useless は少々役に立ちません。これを有用にするのは読者の課題にしておきます。この例の完全な実装は samples/integrationGuide/example2 をご覧下さい。</p>

<ul>
  <li>まず、以下に mydeploy.useless の writer を示します。この新しいクラスは org.apache.axis.wsdl.toJava.JavaWriter を拡張しています。JavaWriter はその拡張に対して動作を指示します。JavaWriter は writeFileHeader と writeFileBody を呼びます。この例ではファイルヘッダを気にしないので、writeFileHeader は操作のないメソッドです。writeFileBody がこの writer の実際の作業を行います。writeFileBody は単に、ユーザの入力に依存するちょっとした歌を書き出します。
    <p>generate メソッドも上書きしたことに注意してください。パーサは常に generate を呼びますが、これはサーバ側の加工物なので、サーバ側の加工物を生成していない (言い換えれば、コマンドラインオプションで --serverSide オプションを指定しない) 限り、それを生成したくはありません。</p>
    <source>public class MyDeployWriter extends JavaWriter {
  public MyDeployWriter(Emitter emitter, Definition definition,
      SymbolTable symbolTable) {
    super(emitter,
          new QName(definition.getTargetNamespace(), "deploy"),
          "",
          "useless",
          "Generating deploy.useless", "deploy");
  }
  public void generate() throws IOException {
    if (emitter.isServerSide()) {
      super.generate();
    }
  }
  protected void writeFileHeader() throws IOException {
  }
  protected void writeFileBody() throws IOException {
    MyEmitter myEmitter = (MyEmitter) emitter;
    if (myEmitter.getSong() == MyEmitter.RUM) {
      pw.println("Yo!  Ho!  Ho!  And a bottle of rum.");
    }
    else if (myEmitter.getSong() == MyEmitter.WORK) {
      pw.println("Hi ho!  Hi ho!  It's off to work we go.");
    }
    else {
      pw.println("Feelings...  Nothing more than feelings...");
    }
    pw.close();
  }
}</source>
  </li>
  <li>前回の例で行ったように単に WSDL2Java に追加するのではなく、WSDL2Java が生成するものを変更しているので、addGenerator を呼ぶのは十分ではありません。WSDL2Java が生成するものを変更するには、生成器ファクトリを作成して自分の生成器を提供する必要があります。WSDL2Java の加工物のほとんどを持ち続けたいので単純に WSDL2Java のファクトリ - JavaGeneratorFactory - を拡張し、addDefinitionGenerators メソッドを上書きします。
    <source>public class MyGeneratorFactory extends JavaGeneratorFactory {
  protected void addDefinitionGenerators() {
    // WSDL2Java's JavaDefinitionWriter
    addGenerator(Definition.class, JavaDefinitionWriter.class);

    // our DeployWriter
    addGenerator(Definition.class, MyDeployWriter.class);

    // WSDL2Java's JavaUndeployWriter
    addGenerator(Definition.class, JavaUndeployWriter.class);
  }
}</source>
  </li>

  <li>ここで私達のツールに API を書く必要があります。オプション - song - を追加したので、プログラムに従った API - Parser の拡張 (実際この場合は Emitter です。なぜなら私達は WSDL2Java を拡張していて、Emitter は WSDL2Java パーサの拡張だからです。) - とコマンドライン API の両方を必要としています。
    <p>ここにプログラムに従った API を示します。Emitter に song アクセッサを追加しています。さらにコントラクタ内で、ファクトリが出力器について、そして出力器がファクトリについて識別するようにしています。</p>
    <source>public class MyEmitter extends Emitter {
  public static final int RUM  = 0;
  public static final int WORK = 1;
  private int song = -1;

  public MyEmitter() {
    MyGeneratorFactory factory = new MyGeneratorFactory();
    setFactory(factory);
    factory.setEmitter(this);
  }
  public int getSong() {
    return song;
  }
  public void setSong(int song) {
    this.song = song;
  }
}</source>
    <p>そしてここにコマンドライン API を示します。これは前の例の main プログラムに比べて多少複雑ですが、たった2つの余分なことしかしません。</p>
    <ol>
      <li>新しいコマンドラインオプション --song rum|work を受け付けます (新たな仕事の内、これが一番大きな塊です)。</li>
      <li>Parser の新しいサブクラスを作成します。</li>
    </ol>
    <source>public class WSDL2Useless extends WSDL2Java {
  protected static final int SONG_OPT = 'g';
  protected static final CLOptionDescriptor[] options
    = new CLOptionDescriptor[]{
        new CLOptionDescriptor("song",
            CLOptionDescriptor.ARGUMENT_REQUIRED,
            SONG_OPT,
            "Choose a song for deploy.useless:  work or rum")
  };

  public WSDL2Useless() {
    addOptions(options);
  }
  protected Parser createParser() {
    return new MyEmitter();
  }
  protected void parseOption(CLOption option) {
    if (option.getId() == SONG_OPT) {
      String arg = option.getArgument();
      if (arg.equals("rum")) {
        ((MyEmitter) parser).setSong(MyEmitter.RUM);
      }
      else if (arg.equals("work")) {
        ((MyEmitter) parser).setSong(MyEmitter.WORK);
      }
    }
    else {
      super.parseOption(option);
    }
  }
  public static void main(String args[]) {
    WSDL2Useless useless = new WSDL2Useless();

    useless.run(args);
  }
}</source>
    <p>これについて1メソッドずつ見ていきましょう。</p>
    <ul>
      <li>コンストラクタ - このコンストラクタは新しいオプション --song rum|work を追加します。(このオプションの省略版は "-g" です。いくぶん奇妙な省略ですが、"-s" は --serverSide の省略で、"-S" は --skeletonDeploy の省略です。残念。それで異なる文字を選んだのです。)</li>
      <li>createParser - 親クラスが私達の Parser 拡張を得られる方法を提供しなくてはいけません。</li>
      <li>parseOption - このメソッドは私達の新しいオプションを処理します。もし与えられたオプションが私達のものでなければ、この仕事を super.parseOption にさせます。</li>
      <li>main - 実際にはこの main は最初の例の main よりも簡単です。最初の main は生成器のリストに私達の生成器を追加する必要がありました。この例ではファクトリが既にそれを行ったので、この main ですることは自身をインスタンス化して自身を run させるだけです。</li>
    </ul>
  </li>
</ul>

</section>

</section>

</section>

<a name="ClientSSL"/>
<section>
<title>クライアント SSL</title>

<p>デフォルトのプラグイン可能なセキュリティソケットファクトリモジュール (<a href="#PluggableAPIs">プラグイン可能 API</a> をご覧下さい) は JSSE セキュリティを利用します。あなたの実行時環境への JSSE のインストール、登録、設定に関する詳細は JSSE ドキュメントをご覧下さい。</p>

</section>

</section>

  </body>
</document>
