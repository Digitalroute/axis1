<?xml version="1.0" encoding="Shift_JIS"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd">
<document>
  <header>
    <title>WebServices - Axis</title>
  </header>
  <body>

<a name="AxisInstallationInstructions"/>
<section>
<title>Axis インストール方法</title>

<a name="TableOfContents"/>
<section>
<title>目次</title>

<ul>
  <li><a href="#Introduction">はじめに</a></li>
  <li><a href="#ThingsYouHaveToKnow">事前知識</a></li>
  <li><a href="#Step0Concepts">ステップ 0: 概念</a></li>
  <li><a href="#Step1PreparingTheWebapp">ステップ 1: webapp を準備する</a></li>
  <li><a href="#Step2SettingUpTheLibraries">ステップ 2: ライブラリの設定</a></li>
  <ul>
    <li><a href="#Tomcat4.xAndJava1.4">Tomcat 4.x と Java 1.4</a></li>
    <li><a href="#WebLogic8.1">WebLogic 8.1</a></li>
  </ul>
  <li><a href="#Step3StartingTheWebServer">ステップ 3: ウェブサーバの起動方法</a></li>
  <li><a href="#Step4ValidateTheInstallation">ステップ 4: インストールを確認する</a></li>
  <ul>
    <li><a href="#LookForTheStartPage">スタートページを探す</a></li>
    <li><a href="#ValidateAxisWithHappyaxis">happyaxis によって Axis を確認する</a></li>
    <li><a href="#LookForSomeServices">いくつかのサービスを見てみる</a></li>
    <li><a href="#TestASOAPEndpoint">SOAP エンドポイントをテストする</a></li>
    <li><a href="#TestAJWSEndpoint">JWS エンドポイントのテスト</a></li>
  </ul>
  <li><a href="#Step5InstallingNewWebServices">ステップ 5: 新しいWebサービスのインストール</a></li>
  <li><a href="#Step6DeployingYourWebService">ステップ 6: Webサービスを配備</a></li>
  <ul>
    <li><a href="#ClasspathSetup">クラスパスの設定</a></li>
    <li><a href="#FindTheDeploymentDescriptor">デプロイメントディスクリプタを探す</a></li>
    <li><a href="#RunTheAdminClient">Admin クライアントの実行</a></li>
  </ul>
  <li><a href="#Step7Testing">ステップ 7: テスト</a></li>
  <li><a href="#AdvancedInstallationAddingAxisToYourOwnWebapp">高度なインストール : 自分の Webapp に Axis を追加する</a></li>
  <li><a href="#WhatIfItDoesntWork">もし動かなかったら</a></li>
  <li><a href="#Summary">まとめ</a></li>
  <li><a href="#AppendixEnablingTheSOAPMonitor">付録: SOAP モニタを有効にする</a></li>
</ul>

</section>

<a name="Introduction"/>
<section>
<title>はじめに</title>

<p>このドキュメントでは Apache Axis のインストール方法を解説します。Java コードの書き方を既に知っていて、XML を恐れない人を対象としています。また、既にアプリケーションサーバかサーブレットエンジンを持っていて、その操作と配備に慣れている人を対象としています。もしアプリケーションサーバが必要であれば、<a href="http://jakarta.apache.org/tomcat/">Jakarta Tomcat</a> [英語] をお勧めします。[ もし Tomcat をインストールするのであれば、最新の 4.1.x 版で、かつ、Java 1.4 対応の LE 版ではなく(LE 版は XML パーサである Xerces を省略するので)、完全版を取得してください ]。その他のサーブレットエンジンも、バージョン 2.2 以上のサーブレット API を実装しているのであれば対応しています。Axis クライアントと Axis サーバは Java 1.3 以降を必要としていることに注意してください。</p>

<p>Axis に関する詳しい情報は<a href="user-guide.html">ユーザガイド</a>をご覧下さい。</p>

</section>

<a name="ThingsYouHaveToKnow"/>
<section>
<title>事前知識</title>

<p>Java 、サーバサイド Java 、SOAPに初めて触れる人たちの多くは、Axis の様々な問題に直面しています。 Axis クライアントと Axis サーバのコードを書いていけば SOAP について学ぶことはできますが、配列とは何か、といった Java の基本概念、サーブレットがどのようにして動くのか、といったアプリケーションサーバの基本概念、そして HTTP プロトコルの基本を学ぶにはふさわしい時機ではありません。</p>

<p>Web サービスのコードを書くのに必要な事前知識は以下の通りです :</p>

<ol>
  <li>基本的な、Java のデータ型、クラス、プログラミング概念。</li>
  <li>スレッド、競合状態、スレッドセーフ、同期化。</li>
  <li>クラスローダ、階層クラスローダ、"ClassNotFoundException" の一般的な原因。</li>
  <li>例外トレースから問題の突き止め方、 NullPointerException (NPE) やその他の一般的な例外と、その修正方法。</li>
  <li>Webアプリケーション、サーブレット。Webアプリケーションにおけるクラス、ライブラリとデータの配置場所。</li>
  <li>アプリケーションサーバの起動方法と、Webアプリケーションの配備方法。</li>
  <li>ネットワーク、IP プロトコル群とソケット API の中心的な概念。特に TCP/IP。</li>
  <li>HTTP、中心的なプロトコルとエラーコード、HTTP ヘッダと(できたら)基本認証の詳細。</li>
  <li>XML。パース方法等は必要ではなく、well-formed XML (整形式の XML 文書)と valid XML (妥当な XML 文書)の構成要素。</li>
</ol>

<p>Axis と SOAP はこれらの詳細に依存しています。もしこれらを知らないのであれば、Axis (あるいはその他のWebサービスミドルウェア)は学ぶには危険な場所です。遅かれ早かれこれらの詳細を知る必要性がでてきます。Axis よりも学びやすい場所があります。</p>

<p>もし Java を全く知らないのであれば、Axis に取り組めるほどの十分な基礎を身に付けるために、Sun のウェブサイトにある The Java Tutorial のようなところか、<a href="http://www.mindview.net/Books/TIJ/">Thinking in Java</a> [英語] のような古典から始めるのをお勧めします。簡単なWebアプリケーションを作ってみるのも良いかもしれません。これにより HTTP がどのようにして動いているのか、 Java アプリケーションサーバがどのようにして HTTP と統合しているのかといった知識を身につけることができます。この点については <a href="http://www.cs.indiana.edu/classes/a348-dger/fall2002/notes/">Mastering the World Wide Web</a> [英語] にある講義ノートが(Axis は講義28でのみ紹介されているにも関わらず)参考になるでしょう。</p>

<p>Axis と SOAP を効果的に使うには上記で挙げたもの以上に学ぶべきことがあることに注意しましょう。その他の大きな領域としては "インターネット規模の分散アプリケーションを作る方法" があります。現在のところ誰もその方法を知らないので、実際に自分でやってみて知識を得る必要があります。</p>

</section>

<a name="Step0Concepts"/>
<section>
<title>ステップ 0: 概念</title>

<p>Apache Axis はオープンソースの SOAP サーバとSOAP クライアントです。SOAP はインターネットを通した、任意の言語で書かれたシステム間の相互アプリケーション通信のための機構です。SOAP は一般的に HTTP 上でメッセージを交換します : クライアントが SOAP リクエストを POST で送り、HTTP サクセスコードと SOAP レスポンス、あるいは HTTP エラーコードのいずれかを受け取ります。オープンソースとは、ソースを得ることができるが問題に直面したときに助けてくれる正式なサポート機関がないことを意味します。</p>

<p>SOAP メッセージは XML メッセージです。これらのメッセージにより SOAP システム間で構造化情報を交換します。メッセージはエンベロープの中の1つ以上の SOAP 要素から構成されています。SOAP 要素とはヘッダとSOAP 本体です。これら要素中のデータを表現するのに SOAP は2つの文法を持っています。1つ目は<i>5節</i>で扱う XML RPC システムの明快な派生物です。2つ目は新しい(そして一般的に優れている)システムである XML スキーマです。Axis は Java オブジェクトをネットワークに送るときと結果を受け取るときに、Java オブジェクトを SOAP データに変換する機構を持っています。何か問題が起きると、サーバは SOAP フォルトを送り、Axis はそれを Java の例外に変換します。</p>

<p>SOAP は異なるシステムを連携させることを目的としています。同じチームによって書かれた Java プログラムを密に連携させるための機構ではありません。SOAP は Java プログラム同士を連携させることができますが、RMI や Corba ほど密には連携できません。RMI なら喜んで直列化していた Java オブジェクトを送ろうとすると、Axis は失敗し、あなたは失望するでしょう。意図的にこのようにしています : もし Axis が RMI を真似て Java オブジェクトをバイトストリームに直列化したら、あらゆるところにおいて Java の特定バージョンに依存することになります。</p>

<p>Axis は、 Java サービスをプログラミングする上で標準的な方法の一つである JAX-RPC API を実装しています。Sun のウェブサイトにある仕様書やチュートリアルを見れば API を理解できます。JAX-RPC API に従ってコードを書けば、Sun や BEA の実装のような、JAX-RPC API の他の実装と連携できます。さらに、Axis は JAX-RPC API をさまざまに拡張する拡張性を提供します。これにより、よりよいプログラムを書くことができますが、Axis の実装とだけしか連携できません。しかし Axis は無料でかつソースを取得できるので、問題にはならないでしょう。</p>

<p>Axis は JAR ファイル <i>axis.jar</i> にコンパイルされていて、JAR ファイル <i>jaxrpc.jar</i> と <i>saaj.jar</i> に宣言されている JAX-RPC API を実装しています。axis.jar はロギング、WSDL プロセッシング、イントロスペクションのための多様なヘルパーライブラリを必要としています。これらの全てのファイルはWebアプリケーション <i>axis.war</i> にパッケージ化し、サーブレットコンテナに配備することができます。Axis にはいくつかのSOAP サービスのサンプルがついてきます。新しくコンパイルしたクラスを Axis の webapp に追加して登録すれば、自分用の SOAP サービスを追加することができます。</p>

<p>その前に、Axis をインストールして動かさなくてはいけません。</p>

</section>

<a name="Step1PreparingTheWebapp"/>
<section>
<title>ステップ 1: webapp を準備する</title>

<p>ここでは、ウェブサーバが localhost のポート 8080 で起動していていることを仮定します。もしお使いのサーバが違うポートで起動しているのであれば、このドキュメントの 8080 をあなたのポート番号に読み替えてください。</p>

<p>お使いのアプリケーションサーバのどのディレクトリにWebアプリケーション("webapps")を配備すればいいのか、調べておく必要があります。このディレクトリに、ダウンロードした xml-axis の中の webapps/axis ディレクトリをコピーします。このディレクトリに好きな名前を付けることができますが、その名前が、クライアントがアクセスするサービスの URL の基礎となることに注意してください。このドキュメントの残りの部分ではデフォルトの webapp 名を "axis" と仮定しますので、もし必要であれば適切に読み替えてください。</p>

</section>

<a name="Step2SettingUpTheLibraries"/>
<section>
<title>ステップ 2: ライブラリの設定</title>

<p>Axis のディレクトリ中に WEB-INF というサブディレクトリがあります。このディレクトリにはいくつかの基本的な設定情報が入っていますが、あなたが配備したい依存関係やWebサービスを入れる際にも使います。</p>

<p>Axis は XML パーサを探し出せる必要があります。もしアプリケーションサーバか Java ランタイムが、ウェブアプリケーションから XML パーサを見えないようにしているのであれば、XML パーサをダウンロードしてウェブアプリケーションに追加する必要があります。Java 1.4 は Crimson パーサを含んでいるのでこの段階を省略することが<i>できます</i>が、Axis チームは Xerces を使うことをお勧めします。</p>

<p>XML パーサを追加するには、JAXP 1.1 XML 準拠のお好みのパーサを手に入れてください。他のパーサでもほとんど動きますが、<a href="http://xml.apache.org/dist/xerces-j/">xml-xerces distribution</a> [英語] にある Xerces のjar 一式 をお勧めします。お使いの JRE やアプリケーションサーバに独自の特定要件がない限り、パーサのライブラリを axis/WEB-INF/lib に入れてください。このドキュメントの例では Xerces を使います。このドキュメントでは Axis からパーサが見えるように AXISCLASSPATH に xml-apis.jar と xercesImpl.jar を追加しています (<a href="#ClasspathSetup">下をご覧下さい</a>)</p>

<p>もし Xerces や DOM に関する ClassNotFound エラーが出るのであれば、XML パーサがインストールされていないか CLASSPATH (あるいは AXISCLASSPATH) が正しく設定されていません。</p>

<a name="Tomcat4.xAndJava1.4"/>
<section>
<title>Tomcat 4.x と Java 1.4</title>

<p>Java 1.4 で java.* と javax.* から始まるパッケージのロード方法のルールが変わりました。具体的に言うと、それらのパッケージは <i>endorsed</i> ディレクトリからのみロードされます。 jaxrpc.jar と saaj.jar は javax パッケージを含んでいるので、それらはロードされません。もし happyaxis.jsp (下をご覧下さい) から該当するパッケージが見えない場合、それらを axis/WEB-INF/lib から CATALINA_HOME/common/lib にコピーし、Tomcat を再起動してください。</p>

</section>

<a name="WebLogic8.1"/>
<section>
<title>WebLogic 8.1</title>

<p>WebLogic 8.1 には <code>webservices.jar</code> が含まれていますが、これは Axis の <code>saaj.jar</code> と衝突し、Axis 1.2 をそのまま使うことができなくなります。この衝突が起こる理由は、WebLogic が <a href="http://java.sun.com/webservices/downloads/webservicespack.html">Java Web Services Developer Pack</a> [英語] Version 1.0 の <code>javax.xml.soap.*</code> パッケージにある古い定義を利用する一方、Axis は J2EE 1.4 の新しい改訂版を利用するからです。</p>

<p>しかしながら、Axis 基盤のWebサービスを Weblogic 8.1 で実行することを可能にする2つの設定変更があります。</p>

<ul>
  <li>Axis を含む webapp 内の、 <code>WEB-INF/weblogic.xml</code> の &lt;prefer-web-inf-classes&gt; 要素を true に設定します。以下に <code>weblogic.xml</code> の例を示します。
<source>&lt;weblogic-web-app&gt;
  &lt;container-descriptor&gt;
    &lt;prefer-web-inf-classes&gt;true&lt;/prefer-web-inf-classes&gt;
  &lt;/container-descriptor&gt;
&lt;/weblogic-web-app&gt;</source>
<p>もし <code>true</code> に設定すれば、<code>&lt;prefer-web-inf-classes&gt;</code> 要素は WebLogic のクラスローダに対して、アプリケーションクラスやシステムクラスよりも優先して WEB-INF ディレクトリ内にあるクラスをロードするように強制させます。この方法は単一のWebモジュールにしか影響を与えないのでお勧めします。</p>
  </li>

  <li>WebLogic サーバを起動するスクリプト内で、<code>CLASSPATH</code> プロパティを修正して、WebLogic の <code>webservices.jar</code> の前に Axis の <code>saaj.jar</code> ライブラリが来るようにします。<br/>
<b>注意:</b> この方法は特定の WebLogic インスタンスにデプロイされた全てのアプリケーションに影響を与えます。これらのアプリケーションは WebLogic の webservices が利用できなくなるかもしれません。</li>
</ul>
 
<p>WebLogic のクラスローダの仕組みの詳細については、<a href="http://e-docs.bea.com/wls/docs81/programming/classloading.html">WebLogic Server Application Classloading</a> [英語] をご覧下さい。</p>

</section>

</section>

<a name="Step3StartingTheWebServer"/>
<section>
<title>ステップ 3: ウェブサーバの起動方法</title>

<p>ウェブサーバの起動方法は製品ごとに異なります。たいていの場合、単純にスタートアップアイコンをダブルクリックするか、コマンドラインからコマンドを起動するだけです。</p>

</section>

<a name="Step4ValidateTheInstallation"/>
<section>
<title>ステップ 4: インストールを確認する</title>

<p>Webアプリケーションと依存関係をインストールしたら、サーバがWebアプリケーションを起動しているか確認しましょう。</p>

<a name="LookForTheStartPage"/>
<section>
<title>スタートページを探す</title>

<p>webapp のスタートページを見てみましょう。たいていの場合、<a href="http://127.0.0.1:8080/axis/">http://127.0.0.1:8080/axis/</a> ですが、もちろんポート番号によって変わります。</p>

<p>これで Apache-Axis のスタートページが見えるはずです。もしスタートページが見えないのであれば、webapp が実際にはインストールされていない、あるいはアプリケーションサーバが起動していません。</p>

</section>

<a name="ValidateAxisWithHappyaxis"/>
<section>
<title>happyaxis によって Axis を確認する</title>

<p>リンク <i>Validate the local installation's configuration</i> をたどってください。<br/>
リンクをたどると、必須ライブラリとオプションライブラリがあるか確認するテストーページ <i>happyaxis.jsp</i> に行きます。このページの URL は<a href="http://localhost:8080/axis/happyaxis.jsp">http://localhost:8080/axis/happyaxis.jsp</a> のようになります。</p>

<p>もし必須ライブラリのうち一つでも足りなければ、Axis は動きません。<br/>
<b>全ての必須ライブラリが見つかり、この確認ページが happy になるまで先に進んではいけません。</b> <br/>
オプションコンポーネントはオプションです。必要性がでてきたらインストールしてください。もし internal server error と例外のトレースしか見えない場合、おそらく複数の XML パーサが CLASSPATH (あるいは AXISCLASSPATH) にあり、これがバージョン不整合の原因となっています。余分のパーサを取り除き、アプリケーションサーバを再起動してもう一度試してください。</p>

</section>

<a name="LookForSomeServices"/>
<section>
<title>いくつかのサービスを見てみる</title>

<p>スタートページで <i>View the list of deployed Web services</i> を選んでください。ここでは、サーブレットで表示しないように設定されていない限り、登録されたWebサービスを全て表示します。このページにある、配備されたそれぞれのWebサービスの <i>(wsdl)</i> をクリックすることで、そのWebサービスが立ち上がっていて動いているか確認することができます。</p>

<p>Axis がサポートしている 'インスタント' JWS Webサービスは、ここへ表示されないことに注意してください。このトピックに関してはインストールガイドで詳しく取り扱っています。</p>

</section>

<a name="TestASOAPEndpoint"/>
<section>
<title>SOAP エンドポイントをテストする</title>

<p>そろそろサービスをテストしてもいい頃でしょう。SOAP 1.1 は<i>エンドポイント</i>に XML リクエストを出す際に HTTP POST を使いますが、Axis はテストに便利な生の HTTP GET アクセス機構もサポートしています。まずは <span class="codefrag">getVersion</span> メソッドを呼んでバージョンエンドポイントから Axis のバージョンを取得してみましょう :</p>

<p><a href="http://localhost:8080/axis/services/Version?method=getVersion">http://localhost:8080/axis/services/Version?method=getVersion</a></p>

<p>次のようなものを返すでしょう :</p>

<source>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;soapenv:Envelope
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;soapenv:Body&gt;
    &lt;getVersionResponse
     soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
      &lt;getVersionReturn
       xsi:type="xsd:string"&gt;
         Apache Axis version: 1.1 Built on Apr 04, 2003 (01:30:37 PST)
      &lt;/getVersionReturn&gt;
    &lt;/getVersionResponse&gt;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</source>

<p>もちろん Axis のバージョンとビルド日時はあなたの結果とは異なっているでしょう。</p>

</section>

<a name="TestAJWSEndpoint"/>
<section>
<title>JWS エンドポイントのテスト</title>

<p>それでは JWS Webサービスをテストしてみましょう。Axis の JWS Webサービスは Axis の webapp の <i>WEB-INF ツリー</i>に入れた、拡張子 .jws の java ファイルです。URL でその .jws ファイルを要求すると、そのファイルはコンパイルされ、そして実行されます。JWS ページについてはユーザガイドで詳しく取り上げています。</p>

<p>JWS サービスをテストするには、用意されている例、 EchoHeaders.jws (これについては axis/ ディレクトリをご覧下さい) に対してリクエストを投げます。</p>

<p>ブラウザで <a href="http://localhost:8080/axis/EchoHeaders.jws?method=list">http://localhost:8080/axis/EchoHeaders.jws?method=list</a> にアクセスしてください。</p>

<p>以下のような、アプリケーションヘッダの XML リストが返って来るでしょう。</p>

<source>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;soapenv:Envelope
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;soapenv:Body&gt;
    &lt;listResponse
     soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
      &lt;listReturn xsi:type="soapenc:Array"
       soapenc:arrayType="xsd:string[6]"
       xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"&gt;
        &lt;item&gt;accept:image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*&lt;/item&gt;
        &lt;item&gt;accept-language:en-us&lt;/item&gt;
        &lt;item&gt;accept-encoding:gzip, deflate&lt;/item&gt;
        &lt;item&gt;user-agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)&lt;/item&gt;
        &lt;item&gt;host:localhost:8080&lt;/item&gt;
        &lt;item&gt;connection:Keep-Alive&lt;/item&gt;
      &lt;/listReturn&gt;
    &lt;/listResponse&gt;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</source>

<p>繰り返しになりますが、正確な戻り値はこれとは異なるでしょうし、正しいホスト名、ポート番号、webapp 名の URL に直す必要があります。</p>

</section>

</section>

<a name="Step5InstallingNewWebServices"/>
<section>
<title>ステップ 5: 新しいWebサービスのインストール</title>

<p>これまでの過程で Axis をインストールし、動かしてきました。次は自分のWebサービスを追加します。</p>

<p>ここでのプロセスを要約すると、(1) 新しいサービスのクラスとライブラリを Axis WAR ディレクトリツリーに入れる、そして (2) それらの新しいファイルを Axis エンジンに認識させる、ということになります。(2) は、Admin ウェブサービスを介して XML デプロイメントディスクリプタを新しいサービスにサブミットすることにより行われます。通常これは AdminClient プログラム、あるいは Ant タスク &lt;axis-admin&gt; により行われます。これら両方とも同じことを行います : Axis SOAP クライアントを起動して、それ自体 SOAP サービスである Axis administration サービスと通信します。Axis administration サービスはある1点について特別な SOAP サービスでもあります。それは、(リモートアクセスではなく)ローカル呼び出しのみに制限されていて、また、あなたのサービスを誰でも管理できるようにさせないためにパスワードで制限されています。クライアントが知っているデフォルトのパスワードがあり、もしそれを変更したら新しいパスワードをクライアントに渡さなければなりません。</p>

<p>最初のステップとして、あなたが書いたコードをサーバに追加します。</p>

<p>WEB-INF ディレクトリの中の "classes" ディレクトリ (つまり axis/WEB-INF/classes ) を探して (あるいは作って) ください。このディレクトリにインストールしたい コンパイル済みの Java クラス を、Java パッケージのディレクトリ構造を壊さないように注意しながらコピーしてください。</p>

<p>もしインストールしたいサービスがすでに JAR ファイルにパッケージ化されているのなら、単に WEB-INF/lib ディレクトリに入れるだけです。依存しているサードパーティ製のライブラリがあれば、同じディレクトリに入れてください。</p>

<p>Axis の webapp に新しいクラスやライブラリを追加したら webapp を再起動してください。これはアプリケーションサーバを再起動するか、あるいは特定の webapp を再起動するサーバ特有の仕組みを利用することによって行います。</p>

<p>注意 : もしあなたのWebサービスが xml-axis の提供する簡単な認証ハンドラを利用している(これは製品版利用を目的としているというよりは、ハンドラの書き方の説明であるため実際はお勧め<u>しません</u>)のであれば 、対応する users.lst ファイルを WEB-INF ディレクトリにコピーする必要があります。</p>

</section>

<a name="Step6DeployingYourWebService"/>
<section>
<title>ステップ 6: Webサービスを配備</title>

<p>これまで設定した様々なクラスや JAR が新しいWebサービスを実行します。残っている作業は、このWebサービスを公開する方法を Axis に伝えることです。このサービスが何か、どのメソッドを公開するのか、そして SOAP エンドポイントとしてのその他の側面を XML で表現するWebサービスデプロイメントディスクリプタ (WSDD) を、Axis は受け取ります。</p>

<p>これらの WSDD ファイルについてはユーザガイドとリファレンスガイドで扱います。ここでは Axis サンプルにある株価サービスの WSDD ファイルを使います。</p>

<a name="ClasspathSetup"/>
<section>
<title>クラスパスの設定</title>

<p>これらのサンプルを動かすために、axis.jar、commons-discovery.jar、commons-logging.jar、jaxrpc.jar、saaj.jar、log4j-1.2.8.jar (あるいはお好みのロギング実装)、そして XML パーサの jar ファイル (例えば xerces.jar) が Java から見えてないといけません。これらのサンプルでは、これらのファイルを AXISCLASSPATH に追加し、サンプル実行時に AXISCLASSPATH を指定しています。また、xml-apis.jar と xercesImpl.jar ファイルを AXIS_LIB ディレクトリにコピーしました。代わりに、XML パーサの jar ファイルを AXISCLASSPATH 変数に追加するか、これら全てのファイルを CLASSPATH 変数に追加してもかまいません。</p>

<p>Windows では、今まで説明したことは次のようにすればよいでしょう。このドキュメントでは Axis を C:\axis にインストールしたと仮定します。この情報を WinNT/2000/XP で恒久的に格納するには、"マイコンピュータ" を右クリックして "プロパティ" を選択します。"詳細" タブをクリックして新しい環境変数を作成します。変数文字列をワードパッドで作成してから該当するテキストフィールドにコピーした方が良いでしょう。</p>

<source>set AXIS_HOME=c:\axis
set AXIS_LIB=%AXIS_HOME%\lib
set AXISCLASSPATH=%AXIS_LIB%\axis.jar;%AXIS_LIB%\commons-discovery.jar;
  %AXIS_LIB%\commons-logging.jar;%AXIS_LIB%\jaxrpc.jar;%AXIS_LIB%\saaj.jar;
  %AXIS_LIB%\log4j-1.2.8.jar;%AXIS_LIB%\xml-apis.jar;%AXIS_LIB%\xercesImpl.jar
</source>

<p>Unix を使っている方も同じようなことをします。これ以降では、Axis を /usr/axis にインストールしていて、bash シェルを利用していることを想定しています。もし違うシェルを使っている場合は、違いについてシェルのドキュメントをご覧下さい。変数をシェルに行き渡らせるためには、シェルのスタートアップ(ドット)ファイルに変数を追加する必要があります。もう一度シェルドキュメントをご覧下さい。</p>

<source>set AXIS_HOME=/usr/axis
set AXIS_LIB=$AXIS_HOME/lib
set AXISCLASSPATH=$AXIS_LIB/axis.jar:$AXIS_LIB/commons-discovery.jar:
  $AXIS_LIB/commons-logging.jar:$AXIS_LIB/jaxrpc.jar:$AXIS_LIB/saaj.jar:
  $AXIS_LIB/log4j-1.2.8.jar:$AXIS_LIB/xml-apis.jar:$AXIS_LIB/xercesImpl.jar
export AXIS_HOME; export AXIS_LIB; export AXISCLASSPATH</source>

<p>Axis のクライアントコードを利用するには、Java を呼ぶ際に AXISCLASSPATH を選びます。お使いのプラットフォームにより</p>

<source>java -cp %AXISCLASSPATH% ...</source>

<p>と入力するか、あるいは</p>

<source>java -cp "$AXISCLASSPATH" ...</source>

<p>と入力します。CLASSPATH にスペースを含まないのであればクオートを省略してもかまいません。</p>

<p>AXISCLASSPATH 変数を CLASSPATH 変数に追加してもよいでしょう。これによってこのガイドにある例題を起動する際に AXISCLASSPATH を追加する必要がなくなります。このドキュメントでは CLASSPATH 変数に追加しなかったことを想定しています。</p>

</section>

<a name="FindTheDeploymentDescriptor"/>
<section>
<title>デプロイメントディスクリプタを探す</title>

<p>axis/samples/stock の中を見て deploy.wsdd ファイルを探してください。これが Axis に伝えたいデプロイメントディスクリプタです。デプロイメントディスクリプタは Axis 特有の XML ファイルであり、Webサービスの配備(アンデプロイ)方法、Axis 自身の設定方法を Axis に伝えます。Axis Administration Webサービスにより、 AdminClient プログラムと、対応する Ant タスクが解釈のために新しい WSDD ファイルをサブミットすることができます。Axis 'エンジン' はその設定を更新し、その状態を保存します。</p>

<p>Axis はデフォルトではその状態をグローバル設定ファイルである axis/WEB-INF/server-config.wsdd に保存します。ときどき、そのようなファイルがありませんという警告メッセージを見かけるかもしれませんが、心配する必要はありません。Axis に何かを配備した後、Axis は server-config.wsdd ファイルを自動生成するからです。webapp の中を確認してこのファイルの中身を見てもかまいませんし、さらには、同じ設定を行いたい他のシステムにコピーすることもできます。Axis は、展開済みのWebアプリケーション<i>と</i> WEB-INF ディレクトリへ状態を保存するために WEB-INF ディレクトリの書き込み許可を必要とします。</p>

</section>

<a name="RunTheAdminClient"/>
<section>
<title>Admin クライアントの実行</title>

<p>samples/stock ディレクトリで以下のコマンドを実行してください。もしこのディレクトリにいなければ、"java.io.FileNotFoundException: deploy.wsdd (システムは指定されたファイルを見つけることができませんでした。)" 例外が発生します。</p>

<table>
  <tr>
    <td><b>Windows では</b>
<source>java -cp %AXISCLASSPATH% org.apache.axis.client.AdminClient
     -lhttp://localhost:8080/axis/services/AdminService deploy.wsdd</source>
<b>UNIX では</b>
<source>java -cp $AXISCLASSPATH org.apache.axis.client.AdminClient
     -lhttp://localhost:8080/axis/services/AdminService deploy.wsdd</source>
    </td>
  </tr>
</table>

<p>もし java クライアントエラー (ClassNotFoundException) が発生したら、AXISCLASSPATH (または CLASSPATH) 変数を正しく設定していない、クラス名を間違えた、あるいはその他の基本的なミスをしたことが考えられます。そのような問題を突き止めるのは 基本的な Java 開発スキルです。もしこれらのやり方を知らないのであれば、今すぐ勉強しましょう。</p>

<p>注意 : localhost をあなたのホスト名、8080 をあなたのWebサーバが使っているポート番号に置き換えてください。もしWebアプリケーションを "axis" 以外に置き換えたのであれば、それに従って URL を変えてください。</p>

<p>もし AxisFault のリストを受け取ったら、クライアントは動いていますが、配備が失敗しています。ここからは TCP のソケット API と、Webサービスの配備に必要な HTTP の基本についての知識を必要とします。もし接続拒否といったソケットエラーを受け取ったら、相手のコンピュータがあなたと通信していないので、原因を探して直してください。もし HTTP エラーコードを受け取ったら、そのエラーの意味を知り、問題を解決してください。これらのスキルはWebサービスを利用する上で基本的なことです。</p>

<p><a href="user-guide.html">ユーザガイド</a> は AdminClient について詳細に取り扱っています。また、Ant ビルドスクリプトにおいて Axis の利用を自動化する <a href="ant/axis-admin.html">Ant タスク</a> [英語] もあります。</p>

</section>

</section>

<a name="Step7Testing"/>
<section>
<title>ステップ 7: テスト</title>

<p>このステップはオプションですが、非常にお勧めです。説明上、すでに株価サンプルをインストールして配備していることを仮定しています。</p>

<ul>
  <li>xml-axis のディレクトリに移動して以下のコマンドを実行してください: 
<table>
  <tr>
    <td><b>Windows では</b>
<source>java -cp .;%AXISCLASSPATH% samples.stock.GetQuote
     -lhttp://localhost:8080/axis/servlet/AxisServlet
     -uuser1 -wpass1 XXX</source>
<b>UNIX では</b>
<source>java -cp $AXISCLASSPATH samples.stock.GetQuote
     -lhttp://localhost:8080/axis/servlet/AxisServlet
     -uuser1 -wpass1 XXX</source>
    </td>
  </tr>
</table>
  </li>

  <li>結果として "55.25" が返ってくるはずです。</li>
</ul>

<p>注意 : 前回と同様に、localhost をあなたのホスト名、8080 をあなたのWebサーバが使っているポート番号に置き換えてください。もしWebアプリケーションを "axis" 以外に置き換えたのであれば、それに従って URL を変えてください。</p>

</section>

<a name="AdvancedInstallationAddingAxisToYourOwnWebapp"/>
<section>
<title>高度なインストール : 自分の Webapp に Axis を追加する</title>

<p>もしあなたがWebアプリケーションの配備の経験が豊かで、特に、既存の、あるいは複雑な webapp にWebサービスを追加したいのであれば、Axis を起動する別のアプローチを取ることができます。Axis の webapp にあなたのクラスを追加する代わりに、あなたのアプリケーションに Axis を追加することができます。</p>

<p>中心となる概念は次の通りです。</p>

<ol>
  <li>あなたの WAR ファイルに axis.jar、wsdl.jar、saaj.jar、jaxrpc.jar、そしてその他の依存しているライブラリを追加します。</li>
  <li>axis/WEB-INF/web.xml からすべての Axis サーブレット宣言とマッピングをコピーして、あなたの web.xml に追加します。</li>
  <li>あなたの webapp をビルドして配備します。</li>
  <li>あなたの webapp の URL に変えることにより、Axis の代わりにあなたの webapp に対して Axis AdminClient を起動します。</li>
</ol>

<p>このプロセスは <a href="http://www.manning-source.com/books/hatcher/hatcher_ch15.pdf">PDF ファイル</a> [英語] でダウンロードできる <a href="http://www.manning.com/hatcher">Java Development with Ant</a> [英語] の15章で取り扱っています。</p>

</section>

<a name="WhatIfItDoesntWork"/>
<section>
<title>もし動かなかったら</title>

<p>Axis はインストールするには複雑なシステムです。なぜなら、あなたのアプリケーションサーバに内在する機能に依存していて、極めて複雑な設定があり、そして全ての分散アプリケーションのようにネットワークに依存するからです。</p>

<p>これまで多くの人がそれぞれの問題を axis-user メーリングリストに投稿し、Axis 開発者だけでなく Axis ユーザも、可能であれば最大限の助けをしてきました。ただ、自分の問題をメーリングリストにあせって投稿する前に、一言注意があります。</p>

<p>Axis はフリーです。つまりお金が支払われているサポート人員はいません。コミュニティから得られる助けは全てボランティアであり、彼らの心からの親切心から来るものです。彼らは、以前助けが欲しかった同じハードルを越える助けをしたい他のユーザかもしれないし、開発者自身かもしれない。しかしそれは皆ボランティアであり、あまり期待しないでください。</p>

<ol>
  <li>開発者メーリングリストではなく、<a href="mailto:axis-user@ws.apache.org">ユーザメーリングリスト</a>に投稿してください。開発者メーリングリストの方がより質の高い答えが返ってきやすいと思うかもしれません。しかし開発者は、スキルを持ったその他大勢のユーザと共に、ユーザメーリングリストにも入っています。ですからより多くの人があなたの質問に答えることができるでしょう。また、検索可能なメーリングリストアーカイブを作る際に、ユーザに関する全ての問題が一つのメーリングリストにある方が都合がいいのです。</li>

  <li>Axis に関連しない質問はしないでください。このメーリングリストは Axis や SOAP に関連しない問題について質問する場所ではありません。MS Soap ツールキットや .NET クライアントサイドの質問ですら積極的な回答を受け取れないでしょう。私達はこれらを避けます。これは、Axis が入っている Sun Java Web Services Developer Pack や Jboss.net にもあてはまります。</li>

  <li>soapbuilders メーリングリストにも邪魔しないでください。このメーリングリストは SOAP ツールキットを開発する人のためのものであって、使う人のものではありません。話題からずれたメッセージはあてつけがましく無視されます。</li>

  <li>誰かがあなたの問題を解決してくれるという保障はありません。そのような状況の一般的な反応は沈黙です。それにはちゃんとした理由があります。もし質問の答えを知らない皆が "私は知りません" と言ったら、メーリングリストは雑音でいっぱいになってしまうからです。沈黙を直接に受け取らないで下さい。</li>

  <li>迅速な返答を期待しないで下さい。たとえ誰かが答えを知っていても、その人がメールを読むまで1日2日かかる場合もあります。ですから1、2時間で回答を得られなかったときに、パニックを起こして再送しないでください。辛抱強くなってください。待っている間は自分自身で問題を解決していてください。</li>

  <li>まずは自分の宿題をかたづけてください。このドキュメントは理解すべき基本的な材料をリストアップしています。返答を受け取るのに1日かかる場合もあると警告もしました。SOAP 呼び出しで HTTP エラー '404' が返ってきたときを想像してください。'助けて' リクエストをあわてて送信するべきでしょうか。それとも HTTP エラーコードが何か、404 番が普通何を意味しているか、Java デバッガをどう使うか、を調べるべきでしょうか。私達はデバッグを簡単にする情報源を提供したはずです。</li>

  <li>意味のある件名にして投稿しましょう。自分のメッセージは読まれずに捨てられるのではなく、読んでほしいはずです。'Axis の問題'、'Axis について助けて' などといった件名は無意味であり、多くの読者を得ることはできないでしょう。</li>

  <li>まずは<a href="http://mail-archives.apache.org/eyebrowse/SummarizeList?listId=209">メーリングリストアーカイブ</a> [英語] を検索して、誰かが同じ問題を抱えていなかったか調べましょう。このリストは検索可能であり、問題に対する回答をより早く手に入れることができます。</li>

  <li><a href="http://issues.apache.org/jira/">jira</a> [英語] データベースを使って Axis バグ (公開、非公開両方とも) を検索してください。</li>

  <li>よく聞かれる質問 (FAQ)、インストールメモ、相互運用性に関する問題、そしてその他の役に立つ情報は<a href="http://wiki.apache.org/ws/ja">Axis Wiki</a> をご覧下さい。</li>

  <li>助けを求める際、その人を知っている場合を除き、直接ある人にメールをしないでください。失礼かつ生意気です。メーリングリストに投稿されたメッセージは全てのコミュニティ(投稿した人とメーリングリストを検索した人両方)に利益をもたらします。個人的なメッセージは受け手の時間を消費するだけで歓迎されません。普通、個人的なリクエストの受け手は、完全に無視をしなかった場合でも、'メーリングリストに聞いてください'という返事をするだけです。</li>

  <li>設定問題を再現するのは難しいので、助けるのも難しいということを理解してください。あなたに代わって診断を自動化する happyaxis.jsp のデモを行いましたが、これでも、特にあいまいなプラットフォームでは、助けを得るのは難しいでしょう。</li>

  <li>最新版、さらには将来リリースされるベータ版の Axis を使ってください。あなたの問題が、最新版ではすでに知られていて直されたバグであるのは嫌でしょう。どんな質問に対しても返ってくる一般的な返答はたいてい '最新リリースを試しましたか' です。</li>

  <li>ソースを勉強して使ってください、そして欠陥を見つけたら直してください。このドキュメントですらもし欠陥を見つけたら直してください。品質を上げるには Axis ユーザメーリングリストの参加を通じてのみ可能です。</li>
</ol>

<p>これを読んで Axis ユーザメーリングリストの参加を思いとどまりましたか。そうでないことを望みます。このメーリングリストは Axis を使う人のものであるため、あなたのプロジェクトが進むにつれて仲間となるでしょう。私達はあなたに、このメーリングリストがサーバサイド Java 開発の初心者のための年中無休のサポートラインではなく、この領域についてある程度自分でできる必要があるということを知っておいてほしかったのです。これは銀の弾丸ではありません。しかしメーリングリストを効果的に使う方法を知っておくことが、Axis のよりよい開発の手助けとなるでしょう。</p>

</section>

<a name="Summary"/>
<section>
<title>まとめ</title>

<p>Axis は単に自分の webapp に追加できる SOAPの実装であり、自分のWebサービスをホストできる webapp です。Axis のインストールは、特に Java 1.4 の厳しい要求が与えられると、少し手間がかかります。順にテストし、happyaxis と同梱のテストサービスを使うといった秩序だったプロセスに従えば、Axis で始めるのが簡単であることがわかります。</p>

</section>

<a name="AppendixEnablingTheSOAPMonitor"/>
<section>
<title>付録: SOAP モニタを有効にする</title>

<p>SOAP モニタにより、ウェブブラウザ(Java plug-in 1.3 以上を用いる)を介して SOAP リクエストとレスポンスを監視することができます。利用方法の詳細な解説についてはユーザガイドの<a href="user-guide.html#AppendixUsingTheSOAPMonitor">SOAP モニタを利用する</a>をご覧下さい。</p>

<p>SOAP モニタはデフォルトでは無効です。有効にする基本的なステップは、SOAP モニタ Java アプレットをコンパイルし、SOAP モニタWebサービスをデプロイし、各監視Webサービスに対してリクエストとレスポンスのフロー定義を追加します。以下に詳細を記します。</p>

<ol> 
  <li>$AXIS_HOME/webapps/axis (あるいは %AXIS_HOME%\webapps\axis) に行き、SOAPMonitorApplet.java をコンパイルします。<br/>
    <table>
      <tr>
        <td>
          <b>Windows では</b>
          <source>javac -classpath %AXIS_HOME%\lib\axis.jar SOAPMonitorApplet.java</source>
          <b>Unix では</b>
          <source>javac -classpath $AXIS_HOME/lib/axis.jar SOAPMonitorApplet.java</source>
        </td>
      </tr>
    </table>
    <p>生成された全てのクラスファイル (つまり SOAPMonitorApplet*.class) を、SOAP モニタを利用するWebアプリケーションのルートディレクトリ (例えば .../tomcat/webapps/axis) にコピーします。</p>
  </li> 
  <li>admin client と deploy-monitor.wsdd ファイル(以下に示しています)を利用して SOAPMonitorService をデプロイします。<br/>
<p>deploy-monitor.wsdd があるディレクトリに行き、以下のコマンドを実行します。このコマンドは、/axis が意図するWebアプリケーションで、ポート 8080 でアクセスすることができることを仮定しています。</p>
    <table>
      <tr>
        <td>
          <b>Windows では</b>
          <source>java -cp %AXISCLASSPATH% org.apache.axis.client.AdminClient 
     -lhttp://localhost:8080/axis/services/AdminService deploy-monitor.wsdd</source>
          <b>UNIX では</b>
          <source>java -cp $AXISCLASSPATH org.apache.axis.client.AdminClient
     -lhttp://localhost:8080/axis/services/AdminService deploy-monitor.wsdd</source>
        </td>
      </tr>
    </table>
    <b>SOAPMonitorService Deployment Descriptor (deploy-monitor.wsdd)</b>
    <source>&lt;deployment xmlns=&quot;http://xml.apache.org/axis/wsdd/&quot; 
            xmlns:java=&quot;http://xml.apache.org/axis/wsdd/providers/java&quot;&gt; 
  &lt;handler name=&quot;soapmonitor&quot; 
           type=&quot;java:org.apache.axis.handlers.SOAPMonitorHandler&quot;&gt; 
    &lt;parameter name=&quot;wsdlURL&quot; 
               value=&quot;/axis/SOAPMonitorService-impl.wsdl&quot;/&gt; 
    &lt;parameter name=&quot;namespace&quot; 
               value=&quot;http://tempuri.org/wsdl/2001/12/SOAPMonitorService-impl.wsdl&quot;/&gt; 
    &lt;parameter name=&quot;serviceName&quot; value=&quot;SOAPMonitorService&quot;/&gt; 
    &lt;parameter name=&quot;portName&quot; value=&quot;Demo&quot;/&gt; 
  &lt;/handler&gt; 
  &lt;service name=&quot;SOAPMonitorService&quot; provider=&quot;java:RPC&quot;&gt; 
    &lt;parameter name=&quot;allowedMethods&quot; value=&quot;publishMessage&quot;/&gt; 
    &lt;parameter name=&quot;className&quot; 
               value=&quot;org.apache.axis.monitor.SOAPMonitorService&quot;/&gt; 
    &lt;parameter name=&quot;scope&quot; value=&quot;Application&quot;/&gt; 
  &lt;/service&gt;
&lt;/deployment&gt;</source>
  </li> 
  <li>監視するそれぞれのサービスに対して、リクエストとレスポンスのフロー定義を、サービスのデプロイメントディスクリプタに追加し、サービスをデプロイ(あるいは再デプロイ)します。<b>requestFlow</b> と <b>responseFlow</b> 定義は <b>&lt;service&gt;</b> 要素の最初のタグになります。サービスが既にデプロイされているのであれば、それをアンデプロイして修正したデプロイメントディスクリプタでデプロイします。以下に例を示します。
    <source>... 
   &lt;service name=&quot;xmltoday-delayed-quotes&quot; provider=&quot;java:RPC&quot;&gt; 
     &lt;requestFlow&gt; 
       &lt;handler type=&quot;soapmonitor&quot;/&gt; 
     &lt;/requestFlow&gt; 
     &lt;responseFlow&gt; 
       &lt;handler type=&quot;soapmonitor&quot;/&gt; 
     &lt;/responseFlow&gt; 
       ...</source> 
  </li> 
  <li>ウェブブラウザで http[s]://host[:port][/webapp]/SOAPMonitor (あなたのWebアプリケーションに適した値に書き換えてください。例えば http://localhost:8080/axis/SOAPMonitor) に行きます。ここではサービスのリクエストとレスポンスが監視できる SOAP モニタアプレットが表示されます。正しく設定され、デプロイされたサービスへのリクエストは全てこのアプレットに表示されるはずです。</li> 
</ol> 

</section>

</section>

  </body>
</document>
