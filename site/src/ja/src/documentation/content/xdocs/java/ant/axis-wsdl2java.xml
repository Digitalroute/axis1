<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd">
<document>
  <header>
    <title>WebServices - Axis</title>
  </header>
  <body>

<section>
<title>Axis-wsdl2java Task</title>

<p>Create Java classes from local or remote WSDL.</p>

<section>
<title>Description</title>

<p>Create Java classes from local or remote WSDL. Mappings from namespaces to packages can be provided as nested &lt;mapping&gt; elements.</p>

<p>Proxy settings are taken from the java runtime settings of http.ProxyHost, http.ProxyPort, etc. The Ant task &lt;setProxy&gt; can set these. As well as the nested mapping elements, this task uses the file <code>NStoPkg.properties</code> in the project base directory for namespace mapping</p>

<p>This task does no dependency checking; files are generated whether they need to be or not. The exception to this is the Impl class, which is not
overwritten if it exists. This is a safety measure. However, all other classes are generated overwriting anything that exists.</p>

<p>The safe way to use this task is to have it generate the java source in a build directory, then have a &lt;copy&gt; task selectively copy the files you need into a safe location. Again, copying into the source tree is dangerous, but a separate build/src tree is safe. Then include this separate tree in the &lt;javac&gt; task's src attribute to include it in the build. Implement your own implementation classes of the server stub and the test cases using the generated templates. If you want to add methods to autogenerated data types, consider subclassing them, or write helper classes.</p>

<p>Tip: if you &lt;get&gt; the wsdl, and use the &lt;filesmatch&gt; condition to compare the fetched wsdl with a catched copy, you can make the target that calls the axis-wsd2ljava task conditional on the WSDL having changed. This stops spurious code regeneration and follow-on rebuilds across the java source tree.</p>

</section>

<section>
<title>Parameters</title>

<table>
  <tr>
    <th>Attribute</th>
    <th>Description</th>
    <th>Type</th>
  </tr>
  <tr>
    <td>all</td>
    <td>flag to generate code for all elements, even unreferenced ones default=false;</td>
    <td>boolean</td>
  </tr>
  <tr>
    <td>debug</td>
    <td>flag for debug output; default=false</td>
    <td>boolean</td>
  </tr>
  <tr>
    <td>deployscope</td>
    <td>add scope to deploy.xml: "Application", "Request", "Session" optional;</td>
    <td>java.lang.String</td>
  </tr>
  <tr>
    <td>factory</td>
    <td>name of the Java2WSDLFactory class for extending WSDL generation functions</td>
    <td>java.lang.String</td>
  </tr>
  <tr>
    <td>helpergen</td>
    <td>Turn on/off Helper class generation; default is false</td>
    <td>boolean</td>
  </tr>
  <tr>
    <td>namespacemappingfile</td>
    <td>set the mapping file. This is a properties file of package=namespace order. Optional, default is to look for a file called NStoPkg.properties in the project directory.</td>
    <td>java.io.File</td>
  </tr>
  <tr>
    <td>noimports</td>
    <td>only generate code for the immediate WSDL document, and not imports; default=false;</td>
    <td>boolean</td>
  </tr>
  <tr>
    <td>output</td>
    <td>output directory for emitted files</td>
    <td>java.io.File</td>
  </tr>
  <tr>
    <td>serverside</td>
    <td>emit server-side bindings for web service; default=false</td>
    <td>boolean</td>
  </tr>
  <tr>
    <td>skeletondeploy</td>
    <td>deploy skeleton (true) or implementation (false) in deploy.wsdd. Default is false. Assumes server-side="true".</td>
    <td>boolean</td>
  </tr>
  <tr>
    <td>testcase</td>
    <td>flag for automatic Junit testcase generation default is false</td>
    <td>boolean</td>
  </tr>
  <tr>
    <td>timeout</td>
    <td>timeout in milliseconds for URL retrieval; default is 45 seconds. Set this to -1 to disable timeouts altogether: other negative values are not allowed)</td>
    <td>long</td>
  </tr>
  <tr>
    <td>typemappingversion</td>
    <td>the default type mapping registry to use. Either 1.1 or 1.2. Default is 1.1</td>
    <td>org.apache.axis.tools.ant.wsdl.TypeMappingVersionEnum</td>
  </tr>
  <tr>
    <td>url</td>
    <td>URL to fetch and generate WSDL for. Can be remote or a local file.</td>
    <td>java.lang.String</td>
  </tr>
  <tr>
    <td>verbose</td>
    <td>flag for verbose output; default=false</td>
    <td>boolean</td>
  </tr>
</table>

</section>

<section>
<title>Parameters as nested elements</title>

<p>mapping (org.apache.axis.tools.ant.wsdl.NamespaceMapping)<br/>add a mapping of namespaces to packages</p>
<p>mappingset (org.apache.axis.tools.ant.wsdl.MappingSet)<br/>add a mapping of namespaces to packages</p>

</section>

</section>

  </body>
</document>
