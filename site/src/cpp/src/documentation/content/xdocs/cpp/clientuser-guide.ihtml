<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML>
<HEAD>
  <TITLE>Axis C++ Client User's Guide</TITLE>
</HEAD>

<BODY><H1>Contents</H1>
<A href="#Introduction">Introduction </A>
<A href="#Pre_reqs"><BR/>
Pre-requisites</A>
<BR/>
<A href="#Generating_and_using_client_stubs">Generating and using client
-stubs</A>
<H1>Introduction
</H1>
<P><A name="Introduction"></A>In order to use web services you need to create client-side stubs that help you to access the service You then use these stubs within your application.<BR/>If you are also responsible for writing the service you need to create the service skeletons and then complete them. This document explains how to use the Axis CPP tooling (WSDL2Ws) to generate and use the client code. If you want to learn how to create your web services please <A
	href="serveruser-guide.html">look here</A>.</P>
	<H1>Pre-requisites</H1>
<P><A name="Pre_reqs"></A>WSDL2Ws is a 100% java tool and requires a version of Java to be on the machine that you create your stubs and skeletons on. The version of Java that is required is &gt;= 1.4<BR/>WSDL2Ws also has a number of pre-requisite jar files that need to be added to your classpath when you run the tooling<BR/>
<BR/>&lt;AxisCPP Install dir&gt;/lib/axis/wsdl2ws.jar: Contains the main WSDL2Ws code.<BR/>&lt;AxisCPP Install dir&gt;/lib/axisjava/axis.jar: Contains the Axis java code which WSDL2Ws is based on<BR/>&lt;AxisCPP Install dir&gt;/lib/axisjava/commons-discovery.jar:<BR/>
&lt;AxisCPP Install dir&gt;/lib/axisjava/commons-logging.jar;<BR/>
&lt;AxisCPP Install dir&gt;/lib/axisjava/jaxrpc.jar; <BR/>
&lt;AxisCPP Install dir&gt;/lib/axisjava/saaj.jar;<BR/>
&lt;AxisCPP Install dir&gt;/lib/axisjava/wsdl4j.jar
<BR/>
<BR/>If you want to learn more about WSDL2Ws please see <A
	href="arch/WSDL2Ws.html">this reference</A> document.
</P>
<H1>Generating
and using client-side stubs</H1>
<P><A name="Generating_and_using_client_stubs"></A>AxisCPP has Java based tooling. If you supply the WSDL which describes your service then WSDL2Ws will produce client-side stubs for you. All you need to do is create your application that uses those stubs. Throughout this section we will use the Calculator service that comes with Axis as an example of how to use the tooling.</P>
<P><B>Note: </B>In order to run the application discussed below you need the &quot;calculator&quot;
service deployed to a server. If you don't want to deploy the calculator service then you need to follow the instructions below but use your own WSDL files that describe your service. If you do want to deploy the calculator service for Apache web server
or the simple_axis_server please <A href="serveruser-guide.html">go here</A>.
Once you've deployed your service then come back to these instructions
and run the calculator client..</P>
<H2>Generating Calculator client C++ classes</H2>WSDL2Ws tools will generate the stubs for the client side. It will generate C++ Client class and header files.
<P>Firstly copy the Calculator wsdl to the client samples directory e.g. (linux)</P>
<P><STRONG>cd &lt;Axis installation directory&gt;/samples/client/calculator</STRONG></P>
<P><STRONG> cp -f &lt;Axis installation directory&gt;/wsdls/Calculator.wsdl ./</STRONG></P>
<P><STRONG>IMPORTANT:In this example we are showing you how to use the WSDL2Ws tooling to generate the stubs using
Calculator.wsdl. However, in the &lt;Axis installation directory&gt;/samples/client/calculator folder you will already find generated files. If you wish to use those without generating new
ones you can do so. We recommend that you run the calculator sample with the
already generated files firstly and later practice using the tooling with Calculator.wsdl.</STRONG> <BR/>
<BR/>Next you create the client-side stubs that represent the Calculator service.
</P>
<P><B>Note: </B>Don't forget to add all of the <A href="#Pre-requisites">pre-requisite</A> jar files into your classpath 
</P>
<P><STRONG> java org.apache.axis.wsdl.wsdl2ws.WSDL2Ws Calculator.wsdl
-lc++ -sclient</STRONG></P>
<P><STRONG> <BR/>
Note:</STRONG> If you specify <STRONG>-o&lt;target directory&gt;</STRONG>
you will have source generated inside the specific folder instead of
the current folder where the tool is run. <BR/>
<BR/>
You now have the client-side stubs generated for you. You now need to create a client that uses those stubs. This class contains a main method in which Calculator
instance is created and its methods are called. </P>
<P><STRONG>#include "Calculator.h"</STRONG> <BR/>
<STRONG>#include&lt;stdio.h&gt;</STRONG> <BR/>
<STRONG>int main()</STRONG> <BR/>
<STRONG>&nbsp;{</STRONG> <BR/>
<STRONG>&nbsp;&nbsp;Calculator c;</STRONG> <BR/>
<STRONG>&nbsp;&nbsp;int intOut;</STRONG> <BR/>
<STRONG>&nbsp;&nbsp;c.add(20, 40, intOut);</STRONG> <BR/>
<STRONG>&nbsp;&nbsp;printf("result is = %d\n", intOut);</STRONG> <BR/>
<STRONG>&nbsp;&nbsp;return 0;</STRONG> <BR/>
<STRONG>&nbsp;}</STRONG></P>
<P>Now build your client application with your compiler of choice (in this example we have used g++ on a linux system)<BR/>
<BR/>
<STRONG>cd &lt;Axis installation directory&gt;/samples/client/calculator</STRONG><BR/>
</P>
<STRONG>g++ *.cpp -I&lt;Axis installation directory&gt;/include -L&lt;Axis installation directory&gt;/lib -ldl
-laxiscpp_client -ocalculator</STRONG> <BR/>
<P><BR/>
<B>Note:</B>In order to run your application you need the calculator service deployed to a server. In order to do that for Apache web server or the simple_axis_server please <A
	href="serveruser-guide.html">go here</A>. Once you've deployed your service then come back to these instructions and run the calculator service. <BR/>
<BR/>
In this instance we have deployed the service to localhost. and are asking the calculator service to add 10 and 5 for us.<BR/>
<BR/>
<A name="Running Calculator Client"></A>Running the calculator sample (linux)<BR/>
<STRONG>./calculator add 10 5 http://localhost/axis/Calculator</STRONG></P>



<P>Now that you've done the sample here you can go on and create your own services and clients using your own service definitions files (WSDL's).<BR/>
<BR/>
Thankyou for using Axis CPP :-)</P></BODY>
</HTML>
