<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
   <title>Axis C++ Memory Management Guide</title>
<link href="axis.css" rel="stylesheet" type="text/css"/>
</head>
<body>

<center>
<h1>
<img SRC="../images/axis.jpg" height="96" width="176"/></h1></center>

<h1>Axis C++ Memory Management Guide</h1>
<P><i>1.0 Version</i></P>
<P><i>Feedback: <a href="mailto:axis-c-dev@ws.apache.org">axis-c-dev@ws.apache.org</a></i></P>

<h3>Contents</h3>
<P><a href="#Introduction">Introduction</a><BR/>
<a href="#Semantics">Allocation/De-allocation Semantics</a><BR/>
<a href="#IHeaderBlock">Dealing with SOAP Headers</a><BR/>
<a href="#Open Issues">Windows Issues</a></P>

<h2><a NAME="Introduction"></a>Introduction</h2>
<p>Memory management is very important and if not handled correctly, 
will quickly consume resources and slow down your application.&nbsp; The basic rules are;-</p>
<p> For client applications,</p>
<ul>
  <li>Any memory object that is created by the client to pass to a web service must be deleted by the client.</li>
  <li>Any memory object that is passed back from the web service must be deleted by the client.</li>
</ul>
<p> For server applications,</p>
<ul>
    <li>Any memory object that is passed to the service from the engine must be deleted by the service.</li>
    <li>Any memory object that is created by the service and handed back to the engine will be deleted by the engine (or generated wrappers).</li>
</ul>
<p> Within the client or service applications, all memory object <u>must</u> be 
created using 'new' and deleted using 'delete' (The C style memory functions 
'malloc' and 'free', or any of their variants must not be used).</p>

<h2><a NAME="Semantics"></a>new/delete Semantics</h2>
<p>If you are using the wrappers produced by WSDL2Ws then a lot of the 
memory management is handled for you within the generated code.&nbsp; You 
still have to follow the rules for client or service, but there may be some 
additional steps that you will have to follow.</p>

<h3>Input Parameters</h3>
<p>The following examples rely on the application is using the stubs generated 
by the WSDL2Ws tool.&nbsp; If the user needs to use the Axis API directly, it is 
assumed that they know what methods to call and how these methods have been 
bundled by the generated code.</p>

<h4>Simple Types</h4>
<p>If the object is not nillable, then use the basic type.&nbsp; For example, if 
the web service requires an <CODE>xsd__byte</CODE> value, then the client/service code would 
be as follows;-</p>
<BLOCKQUOTE>webService-&gt;asNonNillableElement( (xsd__byte) 127)</BLOCKQUOTE>
<P>If the object is nillable, then use a pointer to the basic type.&nbsp; For 
example, if the web service requires a pointer to a <CODE>xsd__byte</CODE> value, then the 
client/service code would be as follows;-</P>
<PRE>xsd__byte * pNillableInput = new xsd__byte();<BR/>
*(pNillableInput) = (xsd__byte) 123;<BR/><BR/>
webService-&gt;asNillableElement( pNillableInput);<BR/><BR/>
delete pNillableInput;</PRE>
<p>Notice that once the client/service code no longer requires the 
pNillableObject object, it is deleted (and must be deleted by the 
client/service code).</p>

<h4>Arrays and Complex Types</h4>
<p>Arrays and Complex Types are treated as nillable, even if they are not.&nbsp; 
For example, if the web service requires an array of&nbsp; <CODE>xsd__byte</CODE> values, 
then the client/service code would be as follows;-</p>
<PRE>// Need an xsd__byte array of 2 elements,<BR/>
// each element is assigned the value 123.<BR/>
int arraySize = 2;<BR/>
xsd__byte ** array = new xsd__byte*[arraySize];<BR/>
for ( int inputIndex = 0 ; inputIndex &lt; arraySize ; inputIndex++ )<BR/>
array[inputIndex] = new xsd__byte( 123);<BR/><BR/>
// Now copy this array into the xsd__byte_Array<BR/>
// that will be used to pass to the web service.<BR/>
xsd__byte_Array arrayInput;<BR/>
arrayInput.set( array, arraySize);<BR/><BR/>
// Call the web service.<BR/>
webService-&gt;asArray( &amp;arrayInput);<BR/><BR/>
// Clear up input array<BR/>
for ( int deleteIndex = 0 ; deleteIndex &lt; arraySize ; deleteIndex++ )<BR/>
{<BR/>
&nbsp;&nbsp;&nbsp; delete<BR/>
&nbsp;&nbsp;&nbsp; array[deleteIndex];<BR/>
}<BR/>
delete [] array;</PRE>
<p>Which is exactly the same code as would be used if the array was not nillable.</p>
<h3>Output Parameters</h3>
<p>The following examples rely on the application is using the stubs generated 
by the WSDL2Ws tool.&nbsp; If the user needs to use the Axis API directly, it is 
assumed that they know what methods to call and how these methods have been 
bundled by the generated code.</p>

<h4>Simple Types</h4>
<p>If the returned object is not nillable, then use the basic type.&nbsp; For 
example, if the web service returns a <CODE>xsd__byte</CODE> value, then the client/service 
code would be as follows;-</p>
<BLOCKQUOTE>xsd__byte result = webService-&gt;asNonNillableElement( (xsd__byte) 127);</BLOCKQUOTE>
<p>If the object is nillable, then use a pointer to the basic type.&nbsp; For 
example, if the web service returns a pointer to a <CODE>xsd__byte</CODE> value, then the 
client/service code would be as follows;-</p>
<PRE>xsd__byte * pNillableOutput = webService-&gt;asNonNillableElement( (xsd__byte) 127);<BR/>
delete pNillableOutput;</PRE>
<p>Notice that once the client/service code no longer requires the 
<CODE>pNillableOutput</CODE> object, it is deleted (and must be deleted by the client/service code).</p>

<h4>Arrays and Complex Types</h4>
<p>Arrays and Complex Types are treated as nillable, even if they are not.&nbsp; 
For example, if the web service returns an array of&nbsp; <CODE>xsd__byte</CODE> values, then 
the client/service code would be as follows;-</p>
<PRE>// Call the web service.<BR/>
xsd__byte_Array * arrayOutput = webService-&gt;getArray();<BR/><BR/>
// Retrieve the information within the array.<BR/>
int byteArraySize = 0;<BR/>
const xsd__byte ** byteArray = arrayOutput-&gt;get( byteArraySize);<BR/><BR/>
// Clear up output array
delete arrayOutput;</PRE>
<p>Which is exactly the same code as would be used if the array was not 
nillable.&nbsp; Notice that only the <CODE>arrayOutput</CODE> object (that is returned 
    by the web service) needs to be deleted.&nbsp; The <CODE>byteArray</CODE> object is a 
    pointer to the contents of the <CODE>arrayOutput</CODE> object so <u>must</u> not be 
    deleted.</p>

<h2><a NAME="IHeaderBlock"></a>Dealing with SOAP Headers</h2>
<h3>From Stubs</h3>
<P> IHeaderBlock is a virtual class that defines the interface to deal with SOAP headers. 
To create an IHeaderBlock in the client application, use the API provided with Stub classes, 
i.e. ;-</P>>
<pre>IHeaderBlock * Stub::createSOAPHeaderBlock( AxisChar * pachLocalName, AxisChar * pachUri);</pre>
<P>    The Stub class methods that handle header blocks keeps a list of all the created 
    header blocks.&nbsp; When the destructor is called, it will clean up memory 
    by deleting the header blocks that were created using the 
    cerateSOAPHeaderBlock method.</P>
<P> <b>Note 1</b>: The client/service 
    application must use the appropriate Stub method to delete a header block, 
    i.e. ;-</P>
<pre>void deleteCurrentSOAPHeaderBlock();</pre>

<p> <b>Note 2</b>: The IHeaderBlock destructor will take care of the header block member variables 
(for example, BasicNodes may have children and attributes.&nbsp; These will be 
deleted when the parent is deleted.).<br/></p>

<h3>From Handlers</h3>
<p> If header blocks are created within a 'Handler' then it is the responsibility of the 
'Handler' writer to delete them. The deletion would occur in the 'clean-up' code either in the fini() 
method or in the destructor of the Handler, depending on the following rules;-</p>
<nl>
	<li> If it is a Session Handler which needs to maintain its state, then the cleanup has to be done in the destructor.</li>
	<li>If it is a request type handler the clean up can be done in the fini() method of the Handler.</li>
</nl>
<P> If a target handler access a header block created by the de-serializer then it is the responsibility of the Handler to delete it.</P>

<h2><a NAME="Open Issues"></a>Windows Issues</h2>
<P> For Windows platforms, everything must built with the compiler flag '/MD' 
regardless whether it is a DLL or an EXE.&nbsp; There are still problems however 
when passing objects over process boundaries.&nbsp; If an object is created in 
one process (say the Axis engine DLL) and then passed to another (say the client 
application) then when the client tries to delete that object, it cannot find it 
on its own process heap and throws an exception.&nbsp; This is because the 
client process does not own the memory object.&nbsp; To overcome this problem, 
on the process boundary, the original object is cloned (the clone uses the 
client heap) and then the original object is freed from the engine heap.&nbsp; 
Here is an example taken from the wrapper code created by WSDL2Ws from the 
Arrays unit test (Arrays.cpp);-</P>
<PRE>xsd__int_Array * Arrays::simpleArray( xsd__int_Array* Value0)<BR/>
{<BR/>
&nbsp;&nbsp;&nbsp;xsd__int_Array * RetArray = new xsd__int_Array();<BR/>
&nbsp;&nbsp;&nbsp;:<BR/>
&nbsp;&nbsp;&nbsp;:<BR/>
&nbsp;&nbsp;&nbsp;if ( AXIS_SUCCESS == m_pCall-&gt;invoke())<BR/>
&nbsp;&nbsp;&nbsp;{<BR/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( AXIS_SUCCESS == m_pCall-&gt;checkMessage( &quot;simpleArrayResponse&quot;, &quot;http://org.apache.axis/Arrays/&quot;))<BR/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Axis_Array * RetAxisArray = m_pCall-&gt;getBasicArray( XSD_INT, &quot;simpleType&quot;, 0);<BR/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RetArray-&gt;clone( *RetAxisArray);<BR/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Axis::AxisDelete( (void*) RetAxisArray, XSD_ARRAY);<BR/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<BR/>&nbsp;&nbsp;&nbsp;}<BR/>
&nbsp;&nbsp;&nbsp;m_pCall-&gt;unInitialize();
<BR/>&nbsp;&nbsp;&nbsp;return
RetArray;<BR/>
}</PRE>
<P> The two lines of interest are the cloning of the memory object (RetAxisArray 
exists within the engine heap) into the RetArray memory object (that exists 
within the client heap) and then the deletion of the RetAxisArray by calling the 
AxisDelete method (which exists within the engine process and hence will be able 
to delete the object from that heap).</P>
</body>
</html>