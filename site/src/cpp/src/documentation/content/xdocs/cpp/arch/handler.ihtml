<html>
<head>
  <meta http-equiv="Content-Type" content="text/html"></meta>
  <title>Handler Tutorial</title>
</head>

<body><H1><A name="Contents">Contents</A></H1>
<UL>
	<LI><A href="#Introduction">Introduction to Handlers </A></LI>
	<LI><A href="#Samples">Handler Samples</A></LI>
	<LI><A href="#ServerHandlerSample">Server sample handler</A></LI>
	<LI><A href="#ClientHandlerSample">Client sample handler</A></LI>
	<LI><A href="#HandlerAPIs">Handler API's</A><A href="#ClientHandlerSample"></A></LI>
</UL>

<H1>Introduction to Handlers</H1>

<P><A name="Introduction"></A>Handlers are pluggable components in Axis C++. Handlers are pieces of code that you write to intercept the message either on the client or service side. We have included a set
of sample handlers for your reference.</BR>
You can write your own handlers by following the instructions given
for the sample Handlers. At the end of this section we have also added some more detailed API information.

</P>

<H1>Handler samples</H1>
<P><A name="Samples"></A>We have included the following sample Handlers for your reference.
<OL>
	<LI> <A href="#ServerHandlerSample">echoStringHeaderHandler</A> (A server side handler sample)
	This sample handler will simply echo (i.e send back) the string which
you send in the SOAP Header in the SOAP request. </LI>
	<LI><A href="#ClientHandlerSample">testHandler</A> (A client side handler sample)

	This sample handler will simply add a SOAP Header to the generated SOAP
	request.</LI>
</OL>
	Please note that these are very primitive sample handlers and are
	presented here to give you an idea about writing your own Handlers.
</P>


<H1>echoStringHeaderHandler (A server side handler sample)</H1>
<P><A name="ServerHandlerSample"></A></P>
<H2>Building the echoStringHeaderHandler</H2>
<H3>Linux</H3>
<P>
<BLOCKQUOTE>The build files are available at</BLOCKQUOTE>
<BLOCKQUOTE>
<B>&lt;Axis install directory&gt;/samples/server/echoStringHeaderHandler</B></BR>
Change your current directory to this directory and then execute the
following...

<UL>
	<LI>make</LI>
	<LI>make install</LI>
</UL>
</BLOCKQUOTE>
<BLOCKQUOTE>The handler <B>libeshhandler.so</B> file will be created at <B>&lt;Axis
install directory&gt;/lib directory</B></BLOCKQUOTE><H3>Windows</H3>
<BLOCKQUOTE>The VC dsw file (ServerHandlers.dsw) is available at</BLOCKQUOTE>
<BLOCKQUOTE><B>&lt;Axis Install directory&gt;/vc/samples/server/
ServerHandlers.dsw</B>.</BLOCKQUOTE>
<BLOCKQUOTE>Open this file and build the project <B>echoStringHeaderHandler</B>. Once the build is successful you will find the DLL (
<B>echoStringHeaderHandler.dll</B>) at<B>&lt;Axis install
directory&gt;/bin</B></BLOCKQUOTE>


<H2>Configuring the echoStringHeader Handler</H2>
<P>Edit the server.wsdd file
<A href="../install-guide.html#Server installation and configuration">(as
created when you configured your server</A>
<A href="../serveruser-guide.html">)</A>
to include the handler for a
particular service.<BR/>
In this instance we are using the Calculator server example that we have used in both the client and server setup examples. The example below shows how a linux file would look e.g. libeshhandler.so is used please vary the file according to the libraries you have created. This example shows the handler being deployed on both the incoming and outgoing message.


<P>&lt;service name="Calculator" provider="CPP:RPC" description="Simple Calculator Axis C++ Service "&gt; </BR>
<B></BR>
&lt;requestFlow name="CalculatorHandlers"&gt;</BR>
&lt;handler name="ESHHandler" type="&lt;Axis installation
directory&gt;/handlers/custom/echoStringHeaderHandler/libeshhandler.so"&gt;
</BR>
&lt;/handler&gt; </BR>
&lt;/requestFlow&gt; </BR>
&lt;responseFlow name="CalculatorHandlers"&gt; </BR>
&lt;handler name="ESHHandler" type="&lt;Axis installation
directory&gt;AXISCPP_DEPLOY/lib/libeshhandler.so"&gt; </BR>
&lt;/handler&gt; </BR>
&lt;/responseFlow&gt; </B></BR>
</BR>
&lt;parameter name="allowedMethods" value="add sub mul div "/&gt; </BR>
&lt;parameter name="className" value="&lt;Axis installation
directory&gt;/webservices/libcalculator.so" /&gt; </BR>
&lt;/service&gt; </BR>




<B>Note:</B> Make sure you specify the correct path of the handler so
in the server.wsdd file.</BR>
</BR>
Now you are almost ready to run your server-side handler.</BR>
You have to restart the Apache server so that it picks up its new configuration and then that's it !<B></B>
</P>
<H2>Running the echoStringHeader Handler</H2>
<P>
Since this Handler is configured to the Calculator web service in the above step, this Handler will be executed when a client sends a SOAP
request to the Calculator web service. Use the <A href="clientuser-guide.html#Generating and using client stubs">calculator
client</A> you created earlier.
</P>
</P>
</P>

<H1>testHandler (A client side handler sample)</H1>
<P><A name="ClientHandlerSample"></A></P>
<H2>Building the testHandler</H2>
<P>
The build files are available at
<B>&lt;Axis installation directory&gt;/samples/client/testHandler</B>. Change your current directory to this direcotory and then you could execute the following.
</P>
<H3>linux</H3>
<P>
<BLOCKQUOTE>
<UL>
	<LI>make</LI>
	<LI>make install</LI>
</UL>
</BLOCKQUOTE>
<BLOCKQUOTE>The handler so file will be created at <B>&lt;Axis
installation directory&gt;/lib/</BR>
</B></BLOCKQUOTE><B></B><H3>windows</H3>
<BLOCKQUOTE>The VC dsw file (ClientHandlers.dsw) is available at <B>&lt;Axis
Installation directory&gt;/vc/samples/client/ClientHandlers.dsw</B>.Open this file and
build the project TestHandler.</BLOCKQUOTE>
<BLOCKQUOTE>Once the build is successful you will find the DLL
testHandler.dll) at <B>&lt;Axis Installation directory&gt;/bin</B>. If you see this DLL at the above
location you are done with the first step.</BLOCKQUOTE>
</P>

<H2>Configuring the testHandler</H2>
<P>
<B></B>Now edit the
<B>&lt;Axis installation directory&gt;/etc/client.wsdd</B>
to include the handler for a
particular service.
<P>In this example we will continue to use the Calculator service. The sample wsdd file outlined below shows a linux directory system - for other operating systems please use the correct path symbols.</BR>
<B>Note: </B>
Up until this point you did not need a client wsdd file the client only requires a wsdd file when it has handlers.
</P>

<P><B>&lt;service name="Calculator" provider="CPP:RPC"
description="Calculator web service"&gt; </BR>
&lt;requestFlow name="CalculatorHandlers"&gt; </BR>
&lt;handler name="TestHandler"
type="&lt;Axis Installation directory&gt;/lib/libtest_client_handler.so"&gt; </BR>
&lt;/handler&gt; </BR>
&lt;/requestFlow&gt; </BR>
&lt;/service&gt;</B></P>




Now you are almost ready to run your client side handler. </BR>
</BR>
<B>Note:</B> If you are using Client side Handlers you need to enter the
<B>ClientWSDDFilePath</B> entry in your <A
	href="install-guide#Installing Client">axiscpp.conf</A> configuration file.</BR>
	
</P>	
<H2>Running the testHandler</H2>
<P>
Since this Handler is configured to the Calculator web service in the
above step, this Handler will be executed when you run the <A
	href="clientuser-guide.html#Generating and using client stubs">calculator
web service client</A>..
</P>

<H1>The Handler API's</H1>
<P><A name="HandlerAPIs"></A>Now you have seen some sample Handlers you can explore more on
Handlers. The following sections should help you understand that API's available to you in your handler code.</BR>
</BR>

In order to get access to the DeSerializer the handler writer can use
the following code block. </BR>
</BR>

<P>
// ----- </BR>
..... </BR>
IHandlerSoapDeSerializer* pIHandlerSoapDeSerializer; </BR>
pIMsg-&gt;getSoapDeSerializer(&pIHandlerSoapDeSerializer);</BR>
..... </BR>
-------// </BR>
</BR>

</P>
<P>In order to get access to a incoming HeaderBlock the handler writer
can use the following code block. </BR>
</BR>

// -----</BR>
.....</BR>
IHeaderBlock* pIHeaderBlock=
pIHandlerSoapDeSerializer->getHeaderBlock("echoMeString",
"http://soapinterop.org/echoheader/");</BR>
.....</BR>
-------//</P>

<P>In order to manipulate the above accessed HeaderBlock the handler
writer can use the following code block. </BR>
</BR>

// -----</BR>
.....</BR>
if (pIHeaderBlock != NULL) {</BR>
</BR>

&nbsp;&nbsp;&nbsp;const BasicNode* pBasicNode=
pIHeaderBlock-&gt;getFirstChild();</BR>
</BR>

&nbsp;&nbsp;&nbsp;const AxisChar* pachHeaderValue;</BR>
</BR>

&nbsp;&nbsp;&nbsp;if (pBasicNode != NULL)</BR>
&nbsp;&nbsp;&nbsp;{</BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((pBasicNode-&gt;getNodeType()) ==
CHARACTER_NODE) {</BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pachHeaderValue=
pBasicNode-&gt;getValue();</BR>
&nbsp;&nbsp;&nbsp;} else {</BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pachHeaderValue = "This was not the
expected value Ros";</BR>
&nbsp;&nbsp;&nbsp;}</BR>
&nbsp;&nbsp;&nbsp;} else </BR>
&nbsp;&nbsp;&nbsp;{</BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pachHeaderValue = "pBascNode is NULL";</BR>
&nbsp;&nbsp;&nbsp; }</BR>
</BR>

&nbsp;&nbsp;&nbsp;AxisChar* pachTmpValue = (AxisChar*)
malloc(strlen(pachHeaderValue) + 4); </BR>
&nbsp;&nbsp;&nbsp;strcpy(pachTmpValue, pachHeaderValue);</BR>
</BR>

&nbsp;&nbsp;&nbsp;pachTemp = "EchoStringHeaderHandlerPr1.id"; </BR>
&nbsp;&nbsp;&nbsp;pIMsg-&gt;setProperty(pachTemp, pachTmpValue);</BR>
</BR>

&nbsp;&nbsp;&nbsp;free(pachTmpValue); </BR>
</BR>

&nbsp;&nbsp;&nbsp;} else { </BR>
</BR>
&nbsp;&nbsp;&nbsp;//do some thing </BR>
&nbsp;&nbsp;&nbsp;//AxisChar* pachTmpValue = "Default values since no
reqeust SOAP header";</BR>
&nbsp;&nbsp;&nbsp;//pachTemp = "EchoStringHeaderHandlerPr1.id";</BR>
&nbsp;&nbsp;&nbsp; //pIMsg-&gt;setProperty(pachTemp, pachTmpValue);</BR>
</BR>

&nbsp;&nbsp;&nbsp;//free(pachTmpValue);</BR>
&nbsp;&nbsp;&nbsp;}</BR>
</P>
<P>.....</BR>
-------// </BR>
</BR>

In order to get access to the incoming SOAP Body the handler writer can
use the following code block. </BR>
</BR>

To get the body as a AxisChar* </BR>
</BR>

// -----</BR>
</BR>
.....</BR>
IHandlerSoapDeSerializer* pIHandlerSoapDeSerializer;</BR>
pIMsg-&gt;getSoapDeSerializer(&pIHandlerSoapDeSerializer);</BR>
AxisChar* pSoapBody = pIHandlerSoapDeSerializer-&gt;getBodyAsChar(); </BR>
.....</BR>
-------// </BR>
</BR>

To get the body as a decoded base64 stream.</BR>
// -----</BR>
.....</BR>
IHandlerSoapDeSerializer* pIHandlerSoapDeSerializer; </BR>
pIMsg-&gt;getSoapDeSerializer(&pIHandlerSoapDeSerializer);</BR>
xsd__base64Binary bb =
pIHandlerSoapDeSerializer-&gtgetBodyAsBase64Binary();</BR>
.....</BR>
-------//</P>

<P><B>Notes:</B></BR>
Have a look at the following classes at the API docs to see all the
available functions and their respective descriptions. (You can even
look at the relevent .h/.hpp header files for the API comments) </BR>
IhandlerSoapDeSerializer</BR>
IHeaderBlock</BR>
BasicNode</BR>
</P>
<P>The BasicNode API is similar (not exactly the same, but ..) to the
DOM and is written as a tree traversing API. </BR>
</BR>

With the sample code samples provided above and with the API notes a
developer will easily be able to write and play around his/her own
Handlers. </BR></P>
</P>
</body>
</html>