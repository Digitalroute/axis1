<html>
  <head>
    <title>WSDL2Ws Tool </title>
  </head>
  <body>

<h1>Axis C++ WSDL2Ws Tool</h1>
<HR size="1" noshade="noshade">
<p><strong>Contents</strong></p>


<UL>
	<LI><A href="#intro">1 Introduction</A></LI>
	<UL>
		<LI><A href="#codegen">1.1 Source Code Generation</A></LI>
		<LI><A href="#proglang">1.2 Programming Languages</A></LI>
		<LI><A href="#encode">1.3 Encoding Styles</A></LI>
		<LI><A href="#svcstyle">1.4 Styles of Services</A></LI>
		<LI><A href="#complext">1.5 Support for Complex Types </A></LI>
	</UL>
	
	<LI><A href="#usage">2 Using the Tool</A></LI>
	<UL>
		<LI><A href="#dependencies">2.1 Dependencies on Axis Java tool</A></LI>
		<LI><A href="#building">2.2 Building the Tool</A></LI>
		<LI><A href="#synopsis">2.3 Synopsis</A></LI>
		<LI><A href="#classpath">2.4 Setting up CLASSPATH</A></LI>
		<LI><A href="#runtool">2.5 Running the Tool</A></LI>
	</UL>
	<LI><A href="#test">3 Architecture</A></LI>
	<UL>
		<LI><A href="#test1">3.1 Outline</A></LI>
		<LI><A href="#test2">3.2 Mediator WebServiceContext</A></LI>
		<LI><A href="#test3">3.3 Generator</A></LI>
		<LI><A href="#test4">3.4 Flow of Execution</A></LI>
		<LI><A href="#test5">3.5 Sequence Diagram</A></LI>
	</UL>
</UL><p>
<a name="intro"></a></p>
<h1>1 Introduction</h1>

      <p>The WSDL2Ws tool that comes with Axis C++ can be used to generate different types of wrapper classes / skeletons for the server side and wrapper classes / stubs for the client side for a given WSDL file. WSDL2Ws tool is written in  Java and is based on the WSDL tools by Axis Java project.
      
<p><a name= "codegen"></a></p>

<h2>1.1 Source Code Generation</h2>

    <p> WSDL2WS tool can be used for generating the following C/C++ source files for a given WSDL file : <p>
<ul>
<li>Server side  skeletons and wrappers</li>
<li>Client side stubs and wrappers</li>
</ul>

  <p>The generated Wrappers support the following functions : <p>
<ul>
<li>Method invocation</li>
<li>Serialization</li>
<li>Deserialization</li>
</ul>

<p><a name="proglang"></a></p>
    <h2>1.2  Programming Languages </h2>
    
<p> The tool is capable of generating source code for both C++ and C</p>
    
<p><a name="encode"></a></p>
    <h2>1.3 Encoding Styles</h2>

    <p>The tool should be able to support SOAP 1.2 encoding style and extensible to support other encoding styles as well. However verifying the compliance with SOAP 1.1 / SOAP 1.2 and WS-I Basic Profile remains a TODO.
 </p>

<p><a name="svcstyle"></a></p>
    <h2>1.4 Styles of Services</h2>

    <p>The tool is able to generate code for RPC (encoded) and Document Literal style WSDLs </p>
 
<p><a name="complext"></a></p>
    <h2>1.5 Support for Complex Types</h2>
     <p>The tool generates wrapper classes / structs / functions for complex types. The generated source include: </p>
<ul>
<li> Wrapper classes for complex types with data members and constructors/destructors</li>
<li> Helper functions for serializing/deserializing complex types</li>
<li> Wrapper structs to handle arrays of complex types</li> 
</ul>

<p><a name="usage"></a></p>
    <h1>2 Using the Tool</h1>

<p><a name="dependencies"></a></p>
<h2>2.1 Dependencies on Axis Java tool</h2>

<p>Apache Axis C++ uses WSDL processing tools from Axis Java project and extends those for C/C++ code generation. </p>
<p>The following jar files that comes with (or used by) Axis Java are required to run Axis C++ WSDL2Ws tool:</p>
<ul>
<li>axis.jar</li>
<li>wsdl4j.jar</li>
<li>commons-discovery.jar</li>
<li>commons-logging.jar</li>
<li>log4j-1.2.8.jar</li>
<li>jaxrpc.jar</li>
<li>saaj.jar</li>
</ul>

<p>"SchemaUtils" (SchemaUtils.java) and "ElementDecl" (ElementDecl.java) classes of Axis Java tools have been overridden by Axis C++ WSDL2Ws implementation.</p>

<p>Other than the two classes mentioned above, no other class from Axis Java WSDL tool implementation has been overridden or extended at present by Axis C++ WSDL2Ws tool; hence all other classes in Axis Java tool are used as they are.</p>

<p>Except for "SchemaUtils" and "ElementDecl" classes, the rest of the classes of Axis C++ WSDL2Ws are unique to Axis C++ and they use functionality form Axis Java jars.</p>

<p><a name="building"></a></p>
<h2>2.2 Building the Tool</h2>
<p>If you want to build the WSDL2Ws tool form source, there is an Apache Ant build script to help you. 
Assuming that you have <a href="http://ant.apache.org/manual/install.html">installed Ant</a> properly, what you have to do is to set the CLASSPATH to include <a href="http://www.apache.org/dyn/closer.cgi/ws/axis/1_2beta/">Axis Java jar files</a> mentioned in the previous section and run ant command in $AXISCPP_HOME/src/wsdl folder. Once you build the tool the generated wsdl2ws.jar file would be placed in $AXISCPP_HOME/lib/axis/ folder.
</p>

<p><a name="synopsis"></a></p>
<h2>2.3 Synopsis</h2>
<p>
<strong>java WSDL2Ws [options] wsdl-file</strong>
</p>
<p><strong>Options</strong></p>

<pre>
-help, -h              print a short help message<br>
-o(folder)             target output folder - default is current folder<br>
-l(c++|c)              target language (c++|c) - default is c++<br>
-s(server|client)      generate server skeletons or client stubs? (serve|client) - default is server<br>
-w(wrapped|nonwrapped) wrapping style of the WSDL (wrapped|nonwrapped) - default is wrapped<br>
-verbose, -v           be verbose<br>
-m(none|gnu)           generate make files (none|gnu) - default is none<br>
</pre>

<p><a name="classpath"></a></p>
<h2>2.4 Setting up CLASSPATH</h2>
<p>Make sure that your CLASSPATH environment variable has all the jar files mentioned in section 2.1 above.
Then modify your CLASSPATH to include the wsdl2ws.jar file from Axis C++:
</p>

<p>On Linux: </p>
<pre>
CLASSPATH=$AXISCPP_HOME/lib/axis/wsdl2ws.jar:$CLASSPATH
export CLASSPATH
</pre>

<p>On Windows: </p>
<pre>
set CLASSPATH=%AXISCPP_HOME%\lib\axis\wsdl2ws.jar;%CLASSPATH%
</pre>
<p>Alternatively, you can use the -classpath option of java command to specify the CLASSPATH.</p>

<p><strong>NOTE: It is a MUST that that you have wsdl2ws.jar from Axis C++ appearing before all the jar files form Axis Java on the CLASSPATH.</strong> If not you will run into trouble when generating code. This is a known problem and happens because the two classes, "SchemaUtils" and "ElementDecl", of Axis C++ that overides Axis Java classes with the same name have identical package names to that of Axis Java classes.
</p>

<p><a name="runtool"></a></p>
<h2>2.5 Running the Tool</h2>

<p>You could run the tool as shown in the following example. Assuming you have not included wsdl2ws.jar in your class path:</p>

<pre>
java -classpath $AXISCPP_HOME/lib/axis/wsdl2ws.jar:$CLASSPATH org.apache.axis.wsdl.wsdl2ws.WSDL2Ws \
     -obaseServerOut $AXISCPP_DEPLOY/wsdls/base.wsdl
</pre>

<p>
The above command will generate C++ server side skeleton and wrapper classes and place the generated source files in a folder named baseServerOut. You could have also used -sserver and -lc++ options to generate the same. To generate client side C++ code for the same WSDL file and place the generated code in baseClientOut folder, you could run:
</p>

<pre>
java -classpath $AXISCPP_HOME/lib/axis/wsdl2ws.jar:$CLASSPATH org.apache.axis.wsdl.wsdl2ws.WSDL2Ws \
     -obaseClientOut -sclient -lc++ $AXISCPP_DEPLOY/wsdls/base.wsdl
</pre>


<p><a name="test"/></p>
    <h1>3 Architecture</h1>
    
   
<p><a name="test1"/>
    <h2>3.1 Outline</h2>


<p>The tool takes a top down approach. It starts with a WSDL document and generates all the classes (skeletons, wrapper classes for complex types and stubs) necessary to deploy (server side) and consume (client side) the web service. For more information about the generated classes please refer to the architecture documentation.</p>

<p> The following figure shows the high level architecture of the WSDL2Ws tool</p>
<align="left">
<img SRC="../images/c/ag/wsdl2ws.jpg" ></align></p>

<p><a name="test2"/>
    <h2>3.2 Mediator WebServiceContext</h2>

<p>The WSDL file and the user options are processed by the WSDL2Ws class. Then WSDL2Ws creates an instance of WebServiceContext class (wscontext), which is the runtime representation of the processed data. This WebServiceContext instance selects the Generator to be used. The Generators extract the information from the WebServiceContext instance and creates the files. The WebServiceContext instance acts as a mediator and creates a loosely coupled system.</p>
<p>
<strong>WebServiceContext has the following components</strong>
</p>
<ol>
<li>  ServiceInfo - information about service </li>
<li>  WrapperInfo - information about wrapper options</li> 
<li>  TypeMap - information about custom types </li>
</ol>

<p><a name="test3"></a></p>
    <h2>3.2 Generator
</h2>

<p>Generator generates a class based on the options passed by user. It contains a class called SourceWriter and the concrete implementation of the SourceWriter decides what the Generator generates. </p>

<p><a name="test4"></a></p>
    <h2>3.4 flow of Execution</h2>
<p>
<ol>
<li>WSDL file and user options are processed by the WSDL2Ws and WebServiceContext object is created</li> 
<li>WebServiceGenaratorFactory will create WebServiceGenerator based on the service style </li>
<li>Then the WebServiceGenarator will create the right set of Generators that will take care of generating C/C++ source files</li> 
<li>Each Generator will invoke SourceWriter which is capable of writing the given type of file</li>
</ol>
</p>


<p><a name="test5"/>
    <h2>3.5 Sequence Diagram
</h2>

<p><center>

<img SRC="../images/c/ag/sequence.jpg" ></center></p>

<HR size="1" noshade="noshade">
  </body>
</html>
