Index: impl/OMAttributeImpl.java
===================================================================
--- impl/OMAttributeImpl.java	(revision 54509)
+++ impl/OMAttributeImpl.java	(working copy)
@@ -1,75 +1,75 @@
-package org.apache.axis.om.impl;
-
-import org.apache.axis.om.OMAttribute;
-import org.apache.axis.om.OMElement;
-import org.apache.axis.om.OMException;
-import org.apache.axis.om.OMNamespace;
-
-import java.io.PrintStream;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-/**
- * Copyright 2001-2004 The Apache Software Foundation.
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * User: Eran Chinthaka - Lanka Software Foundation
- * Date: Oct 6, 2004
- * Time: 11:43:23 AM
- */
-public class OMAttributeImpl extends OMNamedNodeImpl implements OMAttribute {
-    private static String QUOTE_ENTITY = "&quot;";
-    private static Matcher matcher = Pattern.compile("\"").matcher(null);
-
-    public OMAttributeImpl(String localName, OMNamespace ns, String value, OMElement parent) {
-        super(localName, ns, parent);
-        setValue(value);
-    }
-
-    public OMAttributeImpl(String localName, OMNamespace ns, String value) {
-        super(localName, ns, null);
-        setValue(value);
-    }
-
-    synchronized static String replaceQuoteWithEntity(String value) {
-        matcher.reset(value);
-        return matcher.replaceAll(QUOTE_ENTITY);
-    }
-
-    public void print(PrintStream s) throws OMException {
-        super.print(s);
-        s.print('=');
-        String v = value;
-        char quote = '"';
-        if (value.indexOf('"') != -1)
-            if (value.indexOf('\'') == -1)
-                quote = '\'';
-            else
-                v = replaceQuoteWithEntity(value);
-        s.print(quote);
-        s.print(v);
-        s.print(quote);
-    }
-
-    public void detach() throws OMException {
-        if (parent == null)
-            throw new OMException();
-        if (getPreviousSibling() == null)
-            parent.setFirstAttribute((OMAttributeImpl) nextSibling);
-        else
-            previousSibling.setNextSibling(nextSibling);
-        if (nextSibling != null)
-            nextSibling.setPreviousSibling(previousSibling);
-    }
-}
+package org.apache.axis.om.impl;
+
+import org.apache.axis.om.OMAttribute;
+import org.apache.axis.om.OMElement;
+import org.apache.axis.om.OMException;
+import org.apache.axis.om.OMNamespace;
+
+import java.io.PrintStream;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+/**
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * User: Eran Chinthaka - Lanka Software Foundation
+ * Date: Oct 6, 2004
+ * Time: 11:43:23 AM
+ */
+public class OMAttributeImpl extends OMNamedNodeImpl implements OMAttribute {
+    private static String QUOTE_ENTITY = "&quot;";
+    private static Matcher matcher = Pattern.compile("\"").matcher(null);
+
+    public OMAttributeImpl(String localName, OMNamespace ns, String value, OMElement parent) {
+        super(localName, ns, parent);
+        setValue(value);
+    }
+
+    public OMAttributeImpl(String localName, OMNamespace ns, String value) {
+        super(localName, ns, null);
+        setValue(value);
+    }
+
+    synchronized static String replaceQuoteWithEntity(String value) {
+        matcher.reset(value);
+        return matcher.replaceAll(QUOTE_ENTITY);
+    }
+
+    public void print(PrintStream s) throws OMException {
+        super.print(s);
+        s.print('=');
+        String v = value;
+        char quote = '"';
+        if (value.indexOf('"') != -1)
+            if (value.indexOf('\'') == -1)
+                quote = '\'';
+            else
+                v = replaceQuoteWithEntity(value);
+        s.print(quote);
+        s.print(v);
+        s.print(quote);
+    }
+
+    public void detach() throws OMException {
+        if (parent == null)
+            throw new OMException();
+        if (getPreviousSibling() == null)
+            parent.setFirstAttribute((OMAttributeImpl) nextSibling);
+        else
+            previousSibling.setNextSibling(nextSibling);
+        if (nextSibling != null)
+            nextSibling.setPreviousSibling(previousSibling);
+    }
+}
Index: impl/OMTextImpl.java
===================================================================
--- impl/OMTextImpl.java	(revision 54509)
+++ impl/OMTextImpl.java	(working copy)
@@ -1,69 +1,69 @@
-package org.apache.axis.om.impl;
-
-import org.apache.axis.om.OMElement;
-import org.apache.axis.om.OMException;
-import org.apache.axis.om.OMNode;
-import org.apache.axis.om.OMText;
-
-import java.io.PrintStream;
-
-/**
- * Copyright 2001-2004 The Apache Software Foundation.
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * User: Eran Chinthaka - Lanka Software Foundation
- * Date: Oct 6, 2004
- * Time: 1:36:55 PM
- */
-public class OMTextImpl extends OMNodeImpl implements OMText {
-
-    protected short textType;
-
-    public OMTextImpl(OMElement parent, String text) {
-        super(parent);
-        setValue(text);
-        done = true;
-    }
-
-    public OMTextImpl(String s) {
-        super();
-        setValue(s);
-    }
-
-    /**
-     * We use the OMText class to hold comments, text, characterData, CData, etc.,
-     * The codes are found in OMNode class
-     *
-     * @param type
-     */
-    public void setTextType(short type) {
-        this.textType = type;
-    }
-
-    public short getTextType() {
-        return textType;  //TODO implement this
-    }
-
-    public OMNode getFirstChild() throws OMException {
-        throw new OMException();
-    }
-
-    public void setFirstChild(OMNode node) throws OMException {
-        throw new OMException();
-    }
-
-    public void print(PrintStream s) throws OMException {
-        s.print(value);
-    }
-}
+package org.apache.axis.om.impl;
+
+import org.apache.axis.om.OMElement;
+import org.apache.axis.om.OMException;
+import org.apache.axis.om.OMNode;
+import org.apache.axis.om.OMText;
+
+import java.io.PrintStream;
+
+/**
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * User: Eran Chinthaka - Lanka Software Foundation
+ * Date: Oct 6, 2004
+ * Time: 1:36:55 PM
+ */
+public class OMTextImpl extends OMNodeImpl implements OMText {
+
+    protected short textType;
+
+    public OMTextImpl(OMElement parent, String text) {
+        super(parent);
+        setValue(text);
+        done = true;
+    }
+
+    public OMTextImpl(String s) {
+        super();
+        setValue(s);
+    }
+
+    /**
+     * We use the OMText class to hold comments, text, characterData, CData, etc.,
+     * The codes are found in OMNode class
+     *
+     * @param type
+     */
+    public void setTextType(short type) {
+        this.textType = type;
+    }
+
+    public short getTextType() {
+        return textType;  //TODO implement this
+    }
+
+    public OMNode getFirstChild() throws OMException {
+        throw new OMException();
+    }
+
+    public void setFirstChild(OMNode node) throws OMException {
+        throw new OMException();
+    }
+
+    public void print(PrintStream s) throws OMException {
+        s.print(value);
+    }
+}
Index: impl/OMNodeImpl.java
===================================================================
--- impl/OMNodeImpl.java	(revision 54509)
+++ impl/OMNodeImpl.java	(working copy)
@@ -1,195 +1,195 @@
-package org.apache.axis.om.impl;
-
-import org.apache.axis.om.OMElement;
-import org.apache.axis.om.OMException;
-import org.apache.axis.om.OMNode;
-import org.apache.axis.om.Printable;
-
-import java.io.PrintStream;
-
-/**
- * Copyright 2001-2004 The Apache Software Foundation.
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * User: Eran Chinthaka - Lanka Software Foundation
- * Date: Oct 5, 2004
- * Time: 12:54:08 PM
- */
-public class OMNodeImpl implements OMNode, Printable {
-    protected OMElementImpl parent;
-    protected OMNodeImpl nextSibling;
-    protected OMNodeImpl previousSibling;
-    protected String value;
-    protected boolean done;
-
-    public OMNodeImpl() {
-    }
-
-    /**
-     * For a node to exist there must be a parent
-     *
-     * @param parent
-     */
-
-
-    public OMNodeImpl(OMElement parent) {
-        if (parent instanceof OMNodeImpl)
-            this.parent = (OMElementImpl) parent;
-    }
-
-    /**
-     * This method should return the immediate parent of the node.
-     * Parent is always an Element
-     *
-     * @return
-     * @throws org.apache.axis.om.OMException
-     */
-    public OMElement getParent() throws OMException {
-        return parent;
-    }
-
-    public void setParent(OMElement element) {
-        if (element instanceof OMNodeImpl)
-            this.parent = (OMElementImpl) element;
-    }
-
-    /**
-     * This will give the next sibling. This can be an OMAttribute for OMAttribute or OMText or OMELement for others.
-     *
-     * @return
-     * @throws org.apache.axis.om.OMException
-     */
-    public OMNode getNextSibling() throws OMException {
-        System.out.println("***********parent = " + parent);
-        System.out.println("++++++++++++nextSibling = " + nextSibling);
-        if (nextSibling == null && !parent.isComplete())
-            parent.buildNext();
-        return nextSibling;
-    }
-
-    public void setNextSibling(OMNode node) {
-        this.nextSibling = (OMNodeImpl) node;
-    }
-
-    /**
-     * This will return the literal value of the node.
-     * OMText --> the text
-     * OMElement --> name of the element as a QName in String format
-     * OMAttribute --> the value of the attribue
-     *
-     * @return
-     * @throws org.apache.axis.om.OMException
-     */
-    public String getValue() throws OMException {
-        return value;
-    }
-
-    public void setValue(String value) {
-        this.value = value;
-    }
-
-    /**
-     * this will indicate whether parser has parsed this information item completely or not.
-     * If somethings info are not available in the item, one has to check this attribute to make sure that, this
-     * item has been parsed completely or not.
-     *
-     * @return
-     */
-    public boolean isComplete() {
-        return true;
-    }
-
-    public void setComplete(boolean state) {
-        this.done = state;
-    }
-
-    /**
-     * This will remove this information item and its children, from the model completely
-     *
-     * @throws org.apache.axis.om.OMException
-     */
-    public void detach() throws OMException {
-        if (parent == null)
-            throw new OMException();
-        OMNodeImpl nextSibling = (OMNodeImpl) getNextSibling();
-        if (previousSibling == null)
-            parent.setFirstChild(nextSibling);
-        else
-            previousSibling.setNextSibling(nextSibling);
-        if (nextSibling != null)
-            nextSibling.setPreviousSibling(previousSibling);
-
-    }
-
-    /**
-     * This will insert a sibling just after the current information item.
-     *
-     * @param sibling
-     * @throws org.apache.axis.om.OMException
-     */
-    public void insertSiblingAfter(OMNode sibling) throws OMException {
-        if (parent == null)
-            throw new OMException();
-        sibling.setParent(parent);
-
-        if (sibling instanceof OMNodeImpl) {
-            OMNodeImpl siblingImpl = (OMNodeImpl) sibling;
-            if (nextSibling == null)
-                getNextSibling();
-            siblingImpl.setPreviousSibling(this);
-            if (nextSibling != null)
-                nextSibling.setPreviousSibling(sibling);
-            sibling.setNextSibling(nextSibling);
-            nextSibling = siblingImpl;
-        }
-
-    }
-
-    /**
-     * This will insert a sibling just before the current information item
-     *
-     * @param sibling
-     * @throws org.apache.axis.om.OMException
-     */
-    public void insertSiblingBefore(OMNode sibling) throws OMException {
-        if (parent == null)
-            throw new OMException();
-        sibling.setParent(parent);
-
-        if (sibling instanceof OMNodeImpl) {
-            OMNodeImpl siblingImpl = (OMNodeImpl) sibling;
-            siblingImpl.setPreviousSibling(previousSibling);
-            siblingImpl.setNextSibling(this);
-            if (previousSibling == null)
-                parent.setFirstChild(siblingImpl);
-            else
-                previousSibling.setNextSibling(siblingImpl);
-            previousSibling = siblingImpl;
-        }
-    }
-
-    public OMNode getPreviousSibling() {
-        return previousSibling;
-    }
-
-    public void setPreviousSibling(OMNode previousSibling) {
-        this.previousSibling = (OMNodeImpl) previousSibling;
-    }
-
-    public void print(PrintStream ps) throws OMException {
-        throw new OMException();
-    }
-
-
-}
+package org.apache.axis.om.impl;
+
+import org.apache.axis.om.OMElement;
+import org.apache.axis.om.OMException;
+import org.apache.axis.om.OMNode;
+import org.apache.axis.om.Printable;
+
+import java.io.PrintStream;
+
+/**
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * User: Eran Chinthaka - Lanka Software Foundation
+ * Date: Oct 5, 2004
+ * Time: 12:54:08 PM
+ */
+public class OMNodeImpl implements OMNode, Printable {
+    protected OMElementImpl parent;
+    protected OMNodeImpl nextSibling;
+    protected OMNodeImpl previousSibling;
+    protected String value;
+    protected boolean done;
+
+    public OMNodeImpl() {
+    }
+
+    /**
+     * For a node to exist there must be a parent
+     *
+     * @param parent
+     */
+
+
+    public OMNodeImpl(OMElement parent) {
+        if (parent instanceof OMNodeImpl)
+            this.parent = (OMElementImpl) parent;
+    }
+
+    /**
+     * This method should return the immediate parent of the node.
+     * Parent is always an Element
+     *
+     * @return
+     * @throws org.apache.axis.om.OMException
+     */
+    public OMElement getParent() throws OMException {
+        return parent;
+    }
+
+    public void setParent(OMElement element) {
+        if (element instanceof OMNodeImpl)
+            this.parent = (OMElementImpl) element;
+    }
+
+    /**
+     * This will give the next sibling. This can be an OMAttribute for OMAttribute or OMText or OMELement for others.
+     *
+     * @return
+     * @throws org.apache.axis.om.OMException
+     */
+    public OMNode getNextSibling() throws OMException {
+        System.out.println("***********parent = " + parent);
+        System.out.println("++++++++++++nextSibling = " + nextSibling);
+        if (nextSibling == null && !parent.isComplete())
+            parent.buildNext();
+        return nextSibling;
+    }
+
+    public void setNextSibling(OMNode node) {
+        this.nextSibling = (OMNodeImpl) node;
+    }
+
+    /**
+     * This will return the literal value of the node.
+     * OMText --> the text
+     * OMElement --> name of the element as a QName in String format
+     * OMAttribute --> the value of the attribue
+     *
+     * @return
+     * @throws org.apache.axis.om.OMException
+     */
+    public String getValue() throws OMException {
+        return value;
+    }
+
+    public void setValue(String value) {
+        this.value = value;
+    }
+
+    /**
+     * this will indicate whether parser has parsed this information item completely or not.
+     * If somethings info are not available in the item, one has to check this attribute to make sure that, this
+     * item has been parsed completely or not.
+     *
+     * @return
+     */
+    public boolean isComplete() {
+        return true;
+    }
+
+    public void setComplete(boolean state) {
+        this.done = state;
+    }
+
+    /**
+     * This will remove this information item and its children, from the model completely
+     *
+     * @throws org.apache.axis.om.OMException
+     */
+    public void detach() throws OMException {
+        if (parent == null)
+            throw new OMException();
+        OMNodeImpl nextSibling = (OMNodeImpl) getNextSibling();
+        if (previousSibling == null)
+            parent.setFirstChild(nextSibling);
+        else
+            previousSibling.setNextSibling(nextSibling);
+        if (nextSibling != null)
+            nextSibling.setPreviousSibling(previousSibling);
+
+    }
+
+    /**
+     * This will insert a sibling just after the current information item.
+     *
+     * @param sibling
+     * @throws org.apache.axis.om.OMException
+     */
+    public void insertSiblingAfter(OMNode sibling) throws OMException {
+        if (parent == null)
+            throw new OMException();
+        sibling.setParent(parent);
+
+        if (sibling instanceof OMNodeImpl) {
+            OMNodeImpl siblingImpl = (OMNodeImpl) sibling;
+            if (nextSibling == null)
+                getNextSibling();
+            siblingImpl.setPreviousSibling(this);
+            if (nextSibling != null)
+                nextSibling.setPreviousSibling(sibling);
+            sibling.setNextSibling(nextSibling);
+            nextSibling = siblingImpl;
+        }
+
+    }
+
+    /**
+     * This will insert a sibling just before the current information item
+     *
+     * @param sibling
+     * @throws org.apache.axis.om.OMException
+     */
+    public void insertSiblingBefore(OMNode sibling) throws OMException {
+        if (parent == null)
+            throw new OMException();
+        sibling.setParent(parent);
+
+        if (sibling instanceof OMNodeImpl) {
+            OMNodeImpl siblingImpl = (OMNodeImpl) sibling;
+            siblingImpl.setPreviousSibling(previousSibling);
+            siblingImpl.setNextSibling(this);
+            if (previousSibling == null)
+                parent.setFirstChild(siblingImpl);
+            else
+                previousSibling.setNextSibling(siblingImpl);
+            previousSibling = siblingImpl;
+        }
+    }
+
+    public OMNode getPreviousSibling() {
+        return previousSibling;
+    }
+
+    public void setPreviousSibling(OMNode previousSibling) {
+        this.previousSibling = (OMNodeImpl) previousSibling;
+    }
+
+    public void print(PrintStream ps) throws OMException {
+        throw new OMException();
+    }
+
+
+}
Index: impl/OMNavigator.java
===================================================================
--- impl/OMNavigator.java	(revision 54509)
+++ impl/OMNavigator.java	(working copy)
@@ -1,78 +1,78 @@
-/*
- * Copyright  2004 The Apache Software Foundation.
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-
-/*
- * Created on Sep 25, 2004
- *
- */
-package org.apache.axis.om.impl;
-
-import org.apache.axis.om.OMElement;
-import org.apache.axis.om.OMNode;
-
-/**
- * @author Dasarath Weeratunge
- */
-public class OMNavigator {
-    protected OMNode node;
-    private boolean visited;
-    private OMNode next;
-    private boolean backtracked;
-
-    public OMNavigator() {
-    }
-
-    public OMNavigator(OMNode node) {
-        init(node);
-    }
-
-    public void init(OMNode node) {
-        next = node;
-        backtracked = false;
-    }
-
-    public OMNode next() {
-        if (next == null)
-            return null;
-        node = next;
-        visited = backtracked;
-        backtracked = false;
-        if (next instanceof OMElement && !visited) {
-            OMElementImpl e = (OMElementImpl) next;
-            if (e.getFirstChild() != null)
-                next = e.getFirstChild();
-            else if (e.isComplete())
-                backtracked = true;
-            else
-                next = null;
-            return node;
-        }
-        OMNodeImpl n = (OMNodeImpl) next;
-        if (n.nextSibling != null)
-            next = n.nextSibling;
-        else if (n.parent != null && n.parent.isComplete()) {
-            next = n.parent;
-            backtracked = true;
-        } else
-            next = null;
-        return node;
-    }
-
-    public boolean visited() {
-        return visited;
-    }
-}
+/*
+ * Copyright  2004 The Apache Software Foundation.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+/*
+ * Created on Sep 25, 2004
+ *
+ */
+package org.apache.axis.om.impl;
+
+import org.apache.axis.om.OMElement;
+import org.apache.axis.om.OMNode;
+
+/**
+ * @author Dasarath Weeratunge
+ */
+public class OMNavigator {
+    protected OMNode node;
+    private boolean visited;
+    private OMNode next;
+    private boolean backtracked;
+
+    public OMNavigator() {
+    }
+
+    public OMNavigator(OMNode node) {
+        init(node);
+    }
+
+    public void init(OMNode node) {
+        next = node;
+        backtracked = false;
+    }
+
+    public OMNode next() {
+        if (next == null)
+            return null;
+        node = next;
+        visited = backtracked;
+        backtracked = false;
+        if (next instanceof OMElement && !visited) {
+            OMElementImpl e = (OMElementImpl) next;
+            if (e.getFirstChild() != null)
+                next = e.getFirstChild();
+            else if (e.isComplete())
+                backtracked = true;
+            else
+                next = null;
+            return node;
+        }
+        OMNodeImpl n = (OMNodeImpl) next;
+        if (n.nextSibling != null)
+            next = n.nextSibling;
+        else if (n.parent != null && n.parent.isComplete()) {
+            next = n.parent;
+            backtracked = true;
+        } else
+            next = null;
+        return node;
+    }
+
+    public boolean visited() {
+        return visited;
+    }
+}
Index: impl/OMXmlPullParserWrapper.java
===================================================================
--- impl/OMXmlPullParserWrapper.java	(revision 54509)
+++ impl/OMXmlPullParserWrapper.java	(working copy)
@@ -1,333 +1,333 @@
-package org.apache.axis.om.impl;
-
-import org.apache.axis.om.*;
-import org.xmlpull.v1.XmlPullParser;
-import org.xmlpull.v1.XmlPullParserException;
-
-/**
- * Copyright 2001-2004 The Apache Software Foundation.
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * User: Eran Chinthaka - Lanka Software Foundation
- * Date: Oct 6, 2004
- * Time: 11:42:44 AM
- */
-public class OMXmlPullParserWrapper {
-    private XmlPullParser parser;
-    // private OMElementImpl root;
-    private OMDocumentImpl document;
-    private OMNodeImpl lastNode;
-    private boolean cache = true;
-    private boolean slip = false;
-    private boolean navigate = false;
-    private boolean done = false;
-    private OMNavigator navigator = new OMNavigator();
-
-    public OMXmlPullParserWrapper(XmlPullParser parser) {
-        this.parser = parser;
-    }
-
-//    public OMElementImpl getDocument() throws OMException {
-//        if (root == null)
-//            next();
-//        return root;
-//    }
-    public OMDocumentImpl getDocument() throws OMException {
-        document = new OMDocumentImpl(this);
-        return document;
-    }
-
-    private OMNode createOMElement() throws OMException {
-        OMElementImpl node;
-        if (lastNode == null) {
-            node = new OMElementImpl(parser.getName(), null, null, this);
-            document.setRootElement(node);
-//            root = new OMElementImpl(parser.getName(), null, null, this);
-//            node = root;
-        } else if (lastNode.isComplete()) {
-            node = new OMElementImpl(parser.getName(), null, lastNode.getParent(), this);
-            lastNode.setNextSibling(node);
-            node.setPreviousSibling(lastNode);
-        } else {
-            System.out.println("lastNode = " + lastNode.getClass());
-            OMElementImpl e = (OMElementImpl) lastNode;
-            node = new OMElementImpl(parser.getName(), null, (OMElement) lastNode, this);
-            e.setFirstChild(node);
-        }
-
-        int i, j;
-        try {
-            j = parser.getNamespaceCount(parser.getDepth());
-            i = 0;
-            if (j > 1)
-                i = parser.getNamespaceCount(parser.getDepth() - 1);
-            while (i < j) {
-                node.createNamespace(parser.getNamespaceUri(i), parser.getNamespacePrefix(i));
-                i++;
-            }
-        } catch (XmlPullParserException e) {
-            throw new OMException(e);
-        }
-
-        node.setNamespace(node.resolveNamespace(parser.getNamespace(), parser.getPrefix()));
-
-        j = parser.getAttributeCount();
-        for (i = 0; i < j; i++) {
-            OMNamespace ns = null;
-            String uri = parser.getAttributeNamespace(i);
-            if (uri.hashCode() != 0)
-                ns = node.resolveNamespace(uri, parser.getAttributePrefix(i));
-            node.insertAttribute(new OMAttributeImpl(parser.getAttributeName(i), ns, parser.getAttributeValue(i), node));
-        }
-
-        return node;
-    }
-
-    private OMNode createOMText() throws OMException {
-        if (lastNode == null)
-            throw new OMException();
-        OMNodeImpl node;
-        if (lastNode.isComplete()) {
-            node = new OMTextImpl(lastNode.getParent(), parser.getText());
-            lastNode.setNextSibling(node);
-            node.setPreviousSibling(lastNode);
-        } else {
-            OMElementImpl e = (OMElementImpl) lastNode;
-            node = new OMTextImpl(e, parser.getText());
-            e.setFirstChild(node);
-        }
-        return node;
-    }
-
-    public void reset(OMNode node) throws OMException {
-        navigate = true;
-        lastNode = null;
-        navigator.init(node);
-    }
-
-    //	TODO:
-    public int next() throws OMException {
-        try {
-            if (navigate) {
-                OMNodeImpl next = (OMNodeImpl) navigator.next();
-                if (next != null) {
-                    lastNode = next;
-                    if (lastNode instanceof OMText)
-                        return XmlPullParser.TEXT;
-                    else if (navigator.visited())
-                        return XmlPullParser.END_TAG;
-                    else
-                        return XmlPullParser.START_TAG;
-                }
-                navigate = false;
-                if (done)
-                    return XmlPullParser.END_DOCUMENT;
-                if (slip)
-                    throw new OMException();
-            }
-
-            if (done)
-                throw new OMException();
-
-            int token = parser.nextToken();
-
-            if (!cache) {
-                slip = true;
-                return token;
-            }
-
-            switch (token) {
-                case XmlPullParser.START_TAG:
-                    lastNode = (OMNodeImpl) createOMElement();
-                    break;
-
-                case XmlPullParser.TEXT:
-                    lastNode = (OMNodeImpl) createOMText();
-                    break;
-
-                case XmlPullParser.END_TAG:
-                    if (lastNode.isComplete()) {
-                        OMElement parent = lastNode.getParent();
-                        parent.setComplete(true);
-                        lastNode = (OMNodeImpl) parent;
-                    } else {
-                        OMElement e = (OMElement) lastNode;
-                        e.setComplete(true);
-                    }
-                    break;
-
-                case XmlPullParser.END_DOCUMENT:
-                    done = true;
-                    break;
-
-                default :
-                    throw new OMException();
-            }
-            return token;
-        } catch (OMException e) {
-            throw e;
-        } catch (Exception e) {
-            e.printStackTrace();
-            throw new OMException(e);
-        }
-    }
-
-    public void discard(OMElementImpl el) throws OMException {
-        if (el.isComplete() || !cache)
-            throw new OMException();
-        try {
-            cache = false;
-            do {
-                while (parser.next() != XmlPullParser.END_TAG) ;
-                //	TODO:
-            } while (!parser.getName().equals(el.getLocalName()));
-            lastNode = (OMNodeImpl) el.getPreviousSibling();
-            if (lastNode != null)
-                lastNode.setNextSibling(null);
-            else {
-                OMElementImpl parent = (OMElementImpl) el.getParent();
-                if (parent == null)
-                    throw new OMException();
-                parent.setFirstChild(null);
-                lastNode = parent;
-            }
-            slip = false;
-            cache = true;
-        } catch (OMException e) {
-            throw e;
-        } catch (Exception e) {
-            throw new OMException(e);
-        }
-    }
-
-    public void setCache(boolean b) {
-        cache = b;
-    }
-
-    public String getName() throws OMException {
-        if (navigate) {
-            try {
-                OMElement e = (OMElement) lastNode;
-                return e.getLocalName();
-            } catch (Exception e) {
-                throw new OMException(e);
-            }
-        }
-        return parser.getName();
-    }
-
-    public String getText() throws OMException {
-        if (navigate) {
-            try {
-                return (String) lastNode.getValue();
-            } catch (Exception e) {
-                throw new OMException(e);
-            }
-        }
-        return parser.getText();
-    }
-
-    public String getNamespace() throws OMException {
-        if (navigate) {
-            if (lastNode instanceof OMElement) {
-                OMElement node = (OMElement) lastNode;
-                OMNamespace ns = node.getNamespace();
-                if (ns != null)
-                    return ns.getValue();
-                //	TODO: else
-            }
-            throw new OMException();
-        }
-        return parser.getNamespace();
-    }
-
-    public int getNamespaceCount(int arg) throws OMException {
-        if (navigate)
-        //	TODO:
-            throw new OMException();
-        try {
-            return parser.getNamespaceCount(arg);
-        } catch (Exception e) {
-            throw new OMException(e);
-        }
-    }
-
-    public String getNamespacePrefix(int arg) throws OMException {
-        if (navigate)
-        //	TODO:
-            throw new OMException();
-        try {
-            return parser.getNamespacePrefix(arg);
-        } catch (Exception e) {
-            throw new OMException(e);
-        }
-    }
-
-    public String getNamespaceUri(int arg) throws OMException {
-        if (navigate)
-        //	TODO:
-            throw new OMException();
-        try {
-            return parser.getNamespaceUri(arg);
-        } catch (Exception e) {
-            throw new OMException(e);
-        }
-    }
-
-    public String getNamespace(String arg) throws OMException {
-        if (navigate)
-        //	TODO:
-            throw new OMException();
-        try {
-            return parser.getNamespace(arg);
-        } catch (Exception e) {
-            throw new OMException(e);
-        }
-    }
-
-    public String getPrefix() throws OMException {
-        if (navigate)
-        //	TODO:
-            throw new OMException();
-        return parser.getPrefix();
-    }
-
-    public int getAttributeCount() throws OMException {
-        if (navigate)
-        //	TODO:
-            throw new OMException();
-        return parser.getAttributeCount();
-    }
-
-    public String getAttributeNamespace(int arg) throws OMException {
-        if (navigate)
-        //	TODO:
-            throw new OMException();
-        return parser.getAttributeNamespace(arg);
-    }
-
-    public String getAttributeName(int arg) throws OMException {
-        if (navigate)
-        //	TODO:
-            throw new OMException();
-        return parser.getAttributeNamespace(arg);
-    }
-
-    public String getAttributePrefix(int arg) throws OMException {
-        if (navigate)
-        //	TODO:
-            throw new OMException();
-        return parser.getAttributeNamespace(arg);
-    }
-}
+package org.apache.axis.om.impl;
+
+import org.apache.axis.om.*;
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
+
+/**
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * User: Eran Chinthaka - Lanka Software Foundation
+ * Date: Oct 6, 2004
+ * Time: 11:42:44 AM
+ */
+public class OMXmlPullParserWrapper {
+    private XmlPullParser parser;
+    // private OMElementImpl root;
+    private OMDocumentImpl document;
+    private OMNodeImpl lastNode;
+    private boolean cache = true;
+    private boolean slip = false;
+    private boolean navigate = false;
+    private boolean done = false;
+    private OMNavigator navigator = new OMNavigator();
+
+    public OMXmlPullParserWrapper(XmlPullParser parser) {
+        this.parser = parser;
+    }
+
+//    public OMElementImpl getDocument() throws OMException {
+//        if (root == null)
+//            next();
+//        return root;
+//    }
+    public OMDocumentImpl getDocument() throws OMException {
+        document = new OMDocumentImpl(this);
+        return document;
+    }
+
+    private OMNode createOMElement() throws OMException {
+        OMElementImpl node;
+        if (lastNode == null) {
+            node = new OMElementImpl(parser.getName(), null, null, this);
+            document.setRootElement(node);
+//            root = new OMElementImpl(parser.getName(), null, null, this);
+//            node = root;
+        } else if (lastNode.isComplete()) {
+            node = new OMElementImpl(parser.getName(), null, lastNode.getParent(), this);
+            lastNode.setNextSibling(node);
+            node.setPreviousSibling(lastNode);
+        } else {
+            System.out.println("lastNode = " + lastNode.getClass());
+            OMElementImpl e = (OMElementImpl) lastNode;
+            node = new OMElementImpl(parser.getName(), null, (OMElement) lastNode, this);
+            e.setFirstChild(node);
+        }
+
+        int i, j;
+        try {
+            j = parser.getNamespaceCount(parser.getDepth());
+            i = 0;
+            if (j > 1)
+                i = parser.getNamespaceCount(parser.getDepth() - 1);
+            while (i < j) {
+                node.createNamespace(parser.getNamespaceUri(i), parser.getNamespacePrefix(i));
+                i++;
+            }
+        } catch (XmlPullParserException e) {
+            throw new OMException(e);
+        }
+
+        node.setNamespace(node.resolveNamespace(parser.getNamespace(), parser.getPrefix()));
+
+        j = parser.getAttributeCount();
+        for (i = 0; i < j; i++) {
+            OMNamespace ns = null;
+            String uri = parser.getAttributeNamespace(i);
+            if (uri.hashCode() != 0)
+                ns = node.resolveNamespace(uri, parser.getAttributePrefix(i));
+            node.insertAttribute(new OMAttributeImpl(parser.getAttributeName(i), ns, parser.getAttributeValue(i), node));
+        }
+
+        return node;
+    }
+
+    private OMNode createOMText() throws OMException {
+        if (lastNode == null)
+            throw new OMException();
+        OMNodeImpl node;
+        if (lastNode.isComplete()) {
+            node = new OMTextImpl(lastNode.getParent(), parser.getText());
+            lastNode.setNextSibling(node);
+            node.setPreviousSibling(lastNode);
+        } else {
+            OMElementImpl e = (OMElementImpl) lastNode;
+            node = new OMTextImpl(e, parser.getText());
+            e.setFirstChild(node);
+        }
+        return node;
+    }
+
+    public void reset(OMNode node) throws OMException {
+        navigate = true;
+        lastNode = null;
+        navigator.init(node);
+    }
+
+    //	TODO:
+    public int next() throws OMException {
+        try {
+            if (navigate) {
+                OMNodeImpl next = (OMNodeImpl) navigator.next();
+                if (next != null) {
+                    lastNode = next;
+                    if (lastNode instanceof OMText)
+                        return XmlPullParser.TEXT;
+                    else if (navigator.visited())
+                        return XmlPullParser.END_TAG;
+                    else
+                        return XmlPullParser.START_TAG;
+                }
+                navigate = false;
+                if (done)
+                    return XmlPullParser.END_DOCUMENT;
+                if (slip)
+                    throw new OMException();
+            }
+
+            if (done)
+                throw new OMException();
+
+            int token = parser.nextToken();
+
+            if (!cache) {
+                slip = true;
+                return token;
+            }
+
+            switch (token) {
+                case XmlPullParser.START_TAG:
+                    lastNode = (OMNodeImpl) createOMElement();
+                    break;
+
+                case XmlPullParser.TEXT:
+                    lastNode = (OMNodeImpl) createOMText();
+                    break;
+
+                case XmlPullParser.END_TAG:
+                    if (lastNode.isComplete()) {
+                        OMElement parent = lastNode.getParent();
+                        parent.setComplete(true);
+                        lastNode = (OMNodeImpl) parent;
+                    } else {
+                        OMElement e = (OMElement) lastNode;
+                        e.setComplete(true);
+                    }
+                    break;
+
+                case XmlPullParser.END_DOCUMENT:
+                    done = true;
+                    break;
+
+                default :
+                    throw new OMException();
+            }
+            return token;
+        } catch (OMException e) {
+            throw e;
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new OMException(e);
+        }
+    }
+
+    public void discard(OMElementImpl el) throws OMException {
+        if (el.isComplete() || !cache)
+            throw new OMException();
+        try {
+            cache = false;
+            do {
+                while (parser.next() != XmlPullParser.END_TAG) ;
+                //	TODO:
+            } while (!parser.getName().equals(el.getLocalName()));
+            lastNode = (OMNodeImpl) el.getPreviousSibling();
+            if (lastNode != null)
+                lastNode.setNextSibling(null);
+            else {
+                OMElementImpl parent = (OMElementImpl) el.getParent();
+                if (parent == null)
+                    throw new OMException();
+                parent.setFirstChild(null);
+                lastNode = parent;
+            }
+            slip = false;
+            cache = true;
+        } catch (OMException e) {
+            throw e;
+        } catch (Exception e) {
+            throw new OMException(e);
+        }
+    }
+
+    public void setCache(boolean b) {
+        cache = b;
+    }
+
+    public String getName() throws OMException {
+        if (navigate) {
+            try {
+                OMElement e = (OMElement) lastNode;
+                return e.getLocalName();
+            } catch (Exception e) {
+                throw new OMException(e);
+            }
+        }
+        return parser.getName();
+    }
+
+    public String getText() throws OMException {
+        if (navigate) {
+            try {
+                return (String) lastNode.getValue();
+            } catch (Exception e) {
+                throw new OMException(e);
+            }
+        }
+        return parser.getText();
+    }
+
+    public String getNamespace() throws OMException {
+        if (navigate) {
+            if (lastNode instanceof OMElement) {
+                OMElement node = (OMElement) lastNode;
+                OMNamespace ns = node.getNamespace();
+                if (ns != null)
+                    return ns.getValue();
+                //	TODO: else
+            }
+            throw new OMException();
+        }
+        return parser.getNamespace();
+    }
+
+    public int getNamespaceCount(int arg) throws OMException {
+        if (navigate)
+        //	TODO:
+            throw new OMException();
+        try {
+            return parser.getNamespaceCount(arg);
+        } catch (Exception e) {
+            throw new OMException(e);
+        }
+    }
+
+    public String getNamespacePrefix(int arg) throws OMException {
+        if (navigate)
+        //	TODO:
+            throw new OMException();
+        try {
+            return parser.getNamespacePrefix(arg);
+        } catch (Exception e) {
+            throw new OMException(e);
+        }
+    }
+
+    public String getNamespaceUri(int arg) throws OMException {
+        if (navigate)
+        //	TODO:
+            throw new OMException();
+        try {
+            return parser.getNamespaceUri(arg);
+        } catch (Exception e) {
+            throw new OMException(e);
+        }
+    }
+
+    public String getNamespace(String arg) throws OMException {
+        if (navigate)
+        //	TODO:
+            throw new OMException();
+        try {
+            return parser.getNamespace(arg);
+        } catch (Exception e) {
+            throw new OMException(e);
+        }
+    }
+
+    public String getPrefix() throws OMException {
+        if (navigate)
+        //	TODO:
+            throw new OMException();
+        return parser.getPrefix();
+    }
+
+    public int getAttributeCount() throws OMException {
+        if (navigate)
+        //	TODO:
+            throw new OMException();
+        return parser.getAttributeCount();
+    }
+
+    public String getAttributeNamespace(int arg) throws OMException {
+        if (navigate)
+        //	TODO:
+            throw new OMException();
+        return parser.getAttributeNamespace(arg);
+    }
+
+    public String getAttributeName(int arg) throws OMException {
+        if (navigate)
+        //	TODO:
+            throw new OMException();
+        return parser.getAttributeNamespace(arg);
+    }
+
+    public String getAttributePrefix(int arg) throws OMException {
+        if (navigate)
+        //	TODO:
+            throw new OMException();
+        return parser.getAttributeNamespace(arg);
+    }
+}
Index: impl/OMElementImpl.java
===================================================================
--- impl/OMElementImpl.java	(revision 54509)
+++ impl/OMElementImpl.java	(working copy)
@@ -1,236 +1,236 @@
-package org.apache.axis.om.impl;
-
-import org.apache.axis.om.*;
-import org.apache.axis.om.impl.util.OMChildrenIterator;
-
-import java.io.PrintStream;
-import java.util.Iterator;
-
-/**
- * Copyright 2001-2004 The Apache Software Foundation.
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * User: Eran Chinthaka - Lanka Software Foundation
- * Date: Oct 5, 2004
- * Time: 1:16:10 PM
- */
-public class OMElementImpl extends OMNamedNodeImpl implements OMElement {
-    private OMNodeImpl firstChild;
-    OMXmlPullParserWrapper builder;
-    OMAttributeImpl firstAttribute;
-    OMNamespaceImpl firstNamespace;
-
-    public OMElementImpl(OMElement parent) {
-        super(parent);
-    }
-
-    public OMElementImpl(String localName, OMNamespace ns) {
-        super(localName, ns, null);
-        done = true;
-    }
-
-    public OMElementImpl(String localName, OMNamespace ns, OMElement parent, OMXmlPullParserWrapper builder) {
-        super(localName, ns, parent);
-        this.builder = builder;
-
-    }
-
-    /**
-     * This will add child to the element. One can decide whether he append the child or he adds to the
-     * front of the children list
-     *
-     * @param child
-     */
-    public void addChild(OMNode child) {
-        addChild((OMNodeImpl) child);
-    }
-
-    private void addChild(OMNodeImpl child) {
-        if (firstChild == null && !done)
-            builder.next();
-        child.setPreviousSibling(null);
-        child.setNextSibling(firstChild);
-        if (firstChild != null)
-            firstChild.setPreviousSibling(child);
-        child.setParent(this);
-        firstChild = child;
-    }
-
-    /**
-     * This will give the next sibling. This can be an OMAttribute for OMAttribute or OMText or OMELement for others.
-     *
-     * @return
-     * @throws org.apache.axis.om.OMException
-     */
-    public OMNode getNextSibling() throws OMException {
-        while (!done)
-            builder.next();
-        return super.getNextSibling();
-    }
-
-    /**
-     * This returns a collection of this element.
-     * Children can be of types OMElement, OMText.
-     */
-    public Iterator getChildren() {
-        return new OMChildrenIterator(firstChild);
-    }
-
-    /**
-     * THis will create a namespace in the current element scope
-     *
-     * @param uri
-     * @param prefix
-     * @return
-     */
-    public OMNamespace createNamespace(String uri, String prefix) {
-        OMNamespaceImpl ns = new OMNamespaceImpl(uri, prefix);
-        ns.setNextSibling(firstNamespace);
-        firstNamespace = ns;
-        return ns;
-    }
-
-    /**
-     * This will find a namespace with the given uri and prefix, in the scope of the docuemnt.
-     * This will start to find from the current element and goes up in the hiararchy until this finds one.
-     * If none is found, return null
-     *
-     * @param uri
-     * @param prefix
-     * @return
-     * @throws org.apache.axis.om.OMException
-     */
-    public OMNamespace resolveNamespace(String uri, String prefix) throws OMException {
-        OMNamespace ns = firstNamespace;
-        while (ns != null) {
-            if (ns.equals(uri, prefix))
-                return ns;
-            ns = (OMNamespace) ns.getNextSibling();
-        }
-        if (parent != null)
-            return parent.resolveNamespace(uri, prefix);
-        return null;
-    }
-
-    /**
-     * This will returns the first attribute of the element or null, if none is present
-     *
-     * @return
-     */
-    public OMAttribute getFirstAttribute() {
-        return firstAttribute;
-    }
-
-    /**
-     * This will return a List of OMAttributes
-     *
-     * @return
-     */
-    public Iterator getAttributes() {
-       return new OMChildrenIterator(getFirstAttribute());
-    }
-
-    /**
-     * This will insert attribute to this element. Implementor can decide as to insert this
-     * in the front or at the end of set of attributes
-     *
-     * @param attr
-     */
-    public void insertAttribute(OMAttribute attr) {
-
-        OMAttributeImpl attrImpl = (OMAttributeImpl) attr;
-        attrImpl.setPreviousSibling(null);
-        attrImpl.setNextSibling(firstAttribute);
-        if (firstAttribute != null)
-            firstAttribute.setPreviousSibling(attrImpl);
-        attrImpl.setParent(this);
-        firstAttribute = attrImpl;
-    }
-
-    public void removeAttribute(OMAttribute attr) {
-        attr.detach();
-    }
-
-    /**
-     * This will force the parser to proceed, if parser has not yet finished with the XML input
-     */
-    public void buildNext() {
-        builder.next();
-    }
-
-    public OMNodeImpl getFirstChild() {
-        if (firstChild == null && !done)
-            buildNext();
-        return firstChild;
-    }
-
-
-    public void setFirstChild(OMNodeImpl firstChild) {
-        this.firstChild = firstChild;
-    }
-
-    public void print(PrintStream s) throws OMException {
-        s.print('<');
-        super.print(s);
-
-        OMNodeImpl node = firstAttribute;
-        while (node != null) {
-            s.print(" ");
-            node.print(s);
-            node = (OMNodeImpl) node.getNextSibling();
-        }
-
-        node = firstNamespace;
-        while (node != null) {
-            s.print(" ");
-            node.print(s);
-            node = (OMNodeImpl) node.getNextSibling();
-        }
-
-        node = getFirstChild();
-        if (node != null) {
-            s.print('>');
-            while (node != null) {
-                node.print(s);
-                node = (OMNodeImpl) node.getNextSibling();
-            }
-            s.print('<');
-            s.print('/');
-            super.print(s);
-        } else
-            s.print('/');
-        s.print('>');
-    }
-
-    /**
-     * This will remove this information item and its children, from the model completely
-     *
-     * @throws org.apache.axis.om.OMException
-     */
-    public void detach() throws OMException {
-        if (done)
-            super.detach();
-        else
-            builder.discard(this);
-    }
-
-    public void setFirstAttribute(OMAttributeImpl firstAttribute) {
-        this.firstAttribute = firstAttribute;
-    }
-
-
-    public boolean isComplete() {
-        return done;
-    }
-}
+package org.apache.axis.om.impl;
+
+import org.apache.axis.om.*;
+import org.apache.axis.om.impl.util.OMChildrenIterator;
+
+import java.io.PrintStream;
+import java.util.Iterator;
+
+/**
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * User: Eran Chinthaka - Lanka Software Foundation
+ * Date: Oct 5, 2004
+ * Time: 1:16:10 PM
+ */
+public class OMElementImpl extends OMNamedNodeImpl implements OMElement {
+    private OMNodeImpl firstChild;
+    OMXmlPullParserWrapper builder;
+    OMAttributeImpl firstAttribute;
+    OMNamespaceImpl firstNamespace;
+
+    public OMElementImpl(OMElement parent) {
+        super(parent);
+    }
+
+    public OMElementImpl(String localName, OMNamespace ns) {
+        super(localName, ns, null);
+        done = true;
+    }
+
+    public OMElementImpl(String localName, OMNamespace ns, OMElement parent, OMXmlPullParserWrapper builder) {
+        super(localName, ns, parent);
+        this.builder = builder;
+
+    }
+
+    /**
+     * This will add child to the element. One can decide whether he append the child or he adds to the
+     * front of the children list
+     *
+     * @param child
+     */
+    public void addChild(OMNode child) {
+        addChild((OMNodeImpl) child);
+    }
+
+    private void addChild(OMNodeImpl child) {
+        if (firstChild == null && !done)
+            builder.next();
+        child.setPreviousSibling(null);
+        child.setNextSibling(firstChild);
+        if (firstChild != null)
+            firstChild.setPreviousSibling(child);
+        child.setParent(this);
+        firstChild = child;
+    }
+
+    /**
+     * This will give the next sibling. This can be an OMAttribute for OMAttribute or OMText or OMELement for others.
+     *
+     * @return
+     * @throws org.apache.axis.om.OMException
+     */
+    public OMNode getNextSibling() throws OMException {
+        while (!done)
+            builder.next();
+        return super.getNextSibling();
+    }
+
+    /**
+     * This returns a collection of this element.
+     * Children can be of types OMElement, OMText.
+     */
+    public Iterator getChildren() {
+        return new OMChildrenIterator(firstChild);
+    }
+
+    /**
+     * THis will create a namespace in the current element scope
+     *
+     * @param uri
+     * @param prefix
+     * @return
+     */
+    public OMNamespace createNamespace(String uri, String prefix) {
+        OMNamespaceImpl ns = new OMNamespaceImpl(uri, prefix);
+        ns.setNextSibling(firstNamespace);
+        firstNamespace = ns;
+        return ns;
+    }
+
+    /**
+     * This will find a namespace with the given uri and prefix, in the scope of the docuemnt.
+     * This will start to find from the current element and goes up in the hiararchy until this finds one.
+     * If none is found, return null
+     *
+     * @param uri
+     * @param prefix
+     * @return
+     * @throws org.apache.axis.om.OMException
+     */
+    public OMNamespace resolveNamespace(String uri, String prefix) throws OMException {
+        OMNamespace ns = firstNamespace;
+        while (ns != null) {
+            if (ns.equals(uri, prefix))
+                return ns;
+            ns = (OMNamespace) ns.getNextSibling();
+        }
+        if (parent != null)
+            return parent.resolveNamespace(uri, prefix);
+        return null;
+    }
+
+    /**
+     * This will returns the first attribute of the element or null, if none is present
+     *
+     * @return
+     */
+    public OMAttribute getFirstAttribute() {
+        return firstAttribute;
+    }
+
+    /**
+     * This will return a List of OMAttributes
+     *
+     * @return
+     */
+    public Iterator getAttributes() {
+       return new OMChildrenIterator(getFirstAttribute());
+    }
+
+    /**
+     * This will insert attribute to this element. Implementor can decide as to insert this
+     * in the front or at the end of set of attributes
+     *
+     * @param attr
+     */
+    public void insertAttribute(OMAttribute attr) {
+
+        OMAttributeImpl attrImpl = (OMAttributeImpl) attr;
+        attrImpl.setPreviousSibling(null);
+        attrImpl.setNextSibling(firstAttribute);
+        if (firstAttribute != null)
+            firstAttribute.setPreviousSibling(attrImpl);
+        attrImpl.setParent(this);
+        firstAttribute = attrImpl;
+    }
+
+    public void removeAttribute(OMAttribute attr) {
+        attr.detach();
+    }
+
+    /**
+     * This will force the parser to proceed, if parser has not yet finished with the XML input
+     */
+    public void buildNext() {
+        builder.next();
+    }
+
+    public OMNodeImpl getFirstChild() {
+        if (firstChild == null && !done)
+            buildNext();
+        return firstChild;
+    }
+
+
+    public void setFirstChild(OMNodeImpl firstChild) {
+        this.firstChild = firstChild;
+    }
+
+    public void print(PrintStream s) throws OMException {
+        s.print('<');
+        super.print(s);
+
+        OMNodeImpl node = firstAttribute;
+        while (node != null) {
+            s.print(" ");
+            node.print(s);
+            node = (OMNodeImpl) node.getNextSibling();
+        }
+
+        node = firstNamespace;
+        while (node != null) {
+            s.print(" ");
+            node.print(s);
+            node = (OMNodeImpl) node.getNextSibling();
+        }
+
+        node = getFirstChild();
+        if (node != null) {
+            s.print('>');
+            while (node != null) {
+                node.print(s);
+                node = (OMNodeImpl) node.getNextSibling();
+            }
+            s.print('<');
+            s.print('/');
+            super.print(s);
+        } else
+            s.print('/');
+        s.print('>');
+    }
+
+    /**
+     * This will remove this information item and its children, from the model completely
+     *
+     * @throws org.apache.axis.om.OMException
+     */
+    public void detach() throws OMException {
+        if (done)
+            super.detach();
+        else
+            builder.discard(this);
+    }
+
+    public void setFirstAttribute(OMAttributeImpl firstAttribute) {
+        this.firstAttribute = firstAttribute;
+    }
+
+
+    public boolean isComplete() {
+        return done;
+    }
+}
Index: impl/OMNamedNodeImpl.java
===================================================================
--- impl/OMNamedNodeImpl.java	(revision 54509)
+++ impl/OMNamedNodeImpl.java	(working copy)
@@ -1,71 +1,71 @@
-package org.apache.axis.om.impl;
-
-import org.apache.axis.om.OMElement;
-import org.apache.axis.om.OMException;
-import org.apache.axis.om.OMNamedNode;
-import org.apache.axis.om.OMNamespace;
-
-import java.io.PrintStream;
-
-/**
- * Copyright 2001-2004 The Apache Software Foundation.
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * User: Eran Chinthaka - Lanka Software Foundation
- * Date: Oct 5, 2004
- * Time: 1:17:37 PM
- */
-public class OMNamedNodeImpl extends OMNodeImpl implements OMNamedNode {
-
-    OMNamespace ns;
-    String localName;
-
-
-    public OMNamedNodeImpl(String localName, OMNamespace ns, OMElement parent) {
-        super(parent);
-        this.localName = localName;
-        this.ns = ns;
-    }
-
-    public OMNamedNodeImpl(OMElement parent) {
-        super(parent);
-    }
-
-    public String getLocalName() {
-        return localName;
-    }
-
-    public void setLocalName(String localName) {
-        this.localName = localName;
-    }
-
-    public OMNamespace getNamespace() throws OMException {
-        return ns;
-    }
-
-    /**
-     * @param namespace
-     */
-    public void setNamespace(OMNamespace namespace) {
-        this.ns = namespace;
-    }
-
-    public void print(PrintStream ps) throws OMException {
-        if (ns != null && !ns.isDefaultNs()) {
-            ps.print(ns.getPrefix());
-            ps.print(':');
-        }
-        ps.print(localName);
-    }
-}
+package org.apache.axis.om.impl;
+
+import org.apache.axis.om.OMElement;
+import org.apache.axis.om.OMException;
+import org.apache.axis.om.OMNamedNode;
+import org.apache.axis.om.OMNamespace;
+
+import java.io.PrintStream;
+
+/**
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * User: Eran Chinthaka - Lanka Software Foundation
+ * Date: Oct 5, 2004
+ * Time: 1:17:37 PM
+ */
+public class OMNamedNodeImpl extends OMNodeImpl implements OMNamedNode {
+
+    OMNamespace ns;
+    String localName;
+
+
+    public OMNamedNodeImpl(String localName, OMNamespace ns, OMElement parent) {
+        super(parent);
+        this.localName = localName;
+        this.ns = ns;
+    }
+
+    public OMNamedNodeImpl(OMElement parent) {
+        super(parent);
+    }
+
+    public String getLocalName() {
+        return localName;
+    }
+
+    public void setLocalName(String localName) {
+        this.localName = localName;
+    }
+
+    public OMNamespace getNamespace() throws OMException {
+        return ns;
+    }
+
+    /**
+     * @param namespace
+     */
+    public void setNamespace(OMNamespace namespace) {
+        this.ns = namespace;
+    }
+
+    public void print(PrintStream ps) throws OMException {
+        if (ns != null && !ns.isDefaultNs()) {
+            ps.print(ns.getPrefix());
+            ps.print(':');
+        }
+        ps.print(localName);
+    }
+}
Index: impl/OMNamespaceImpl.java
===================================================================
--- impl/OMNamespaceImpl.java	(revision 54509)
+++ impl/OMNamespaceImpl.java	(working copy)
@@ -1,70 +1,70 @@
-package org.apache.axis.om.impl;
-
-import org.apache.axis.om.OMException;
-import org.apache.axis.om.OMNamespace;
-import org.apache.axis.om.OMNode;
-
-import java.io.PrintStream;
-
-/**
- * Copyright 2001-2004 The Apache Software Foundation.
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * User: Eran Chinthaka - Lanka Software Foundation
- * Date: Oct 6, 2004
- * Time: 11:43:32 AM
- */
-public class OMNamespaceImpl extends OMNodeImpl implements OMNamespace {
-    private String prefix;
-
-    protected OMNamespaceImpl(String uri, String prefix) {
-        value = uri;
-        this.prefix = prefix;
-    }
-
-
-    public boolean equals(OMNamespace ns) {
-        return ((prefix == null && ns.getPrefix() == null) || (prefix != null && prefix.equals(ns.getPrefix())))
-                && value.equals(ns.getValue());
-    }
-
-    public boolean equals(String uri, String prefix) {
-        return ((prefix == null && this.prefix == null) || (prefix != null && prefix.equals(this.prefix)))
-                && value.equals(uri);
-    }
-
-    public void print(PrintStream s) {
-        s.print("xmlns");
-        if (prefix != null) {
-            s.print(':');
-            s.print(prefix);
-        }
-        s.print('=');
-        s.print('"');
-        s.print(value);
-        s.print('"');
-    }
-
-    public boolean isDefaultNs() {
-        return prefix == null;
-    }
-
-    public String getPrefix() {
-        return prefix;  //TODO implement this
-    }
-
-    public OMNode getNextSibling() throws OMException {
-        return nextSibling;
-    }
-}
+package org.apache.axis.om.impl;
+
+import org.apache.axis.om.OMException;
+import org.apache.axis.om.OMNamespace;
+import org.apache.axis.om.OMNode;
+
+import java.io.PrintStream;
+
+/**
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * User: Eran Chinthaka - Lanka Software Foundation
+ * Date: Oct 6, 2004
+ * Time: 11:43:32 AM
+ */
+public class OMNamespaceImpl extends OMNodeImpl implements OMNamespace {
+    private String prefix;
+
+    protected OMNamespaceImpl(String uri, String prefix) {
+        value = uri;
+        this.prefix = prefix;
+    }
+
+
+    public boolean equals(OMNamespace ns) {
+        return ((prefix == null && ns.getPrefix() == null) || (prefix != null && prefix.equals(ns.getPrefix())))
+                && value.equals(ns.getValue());
+    }
+
+    public boolean equals(String uri, String prefix) {
+        return ((prefix == null && this.prefix == null) || (prefix != null && prefix.equals(this.prefix)))
+                && value.equals(uri);
+    }
+
+    public void print(PrintStream s) {
+        s.print("xmlns");
+        if (prefix != null) {
+            s.print(':');
+            s.print(prefix);
+        }
+        s.print('=');
+        s.print('"');
+        s.print(value);
+        s.print('"');
+    }
+
+    public boolean isDefaultNs() {
+        return prefix == null;
+    }
+
+    public String getPrefix() {
+        return prefix;  //TODO implement this
+    }
+
+    public OMNode getNextSibling() throws OMException {
+        return nextSibling;
+    }
+}
Index: impl/OMDocumentImpl.java
===================================================================
--- impl/OMDocumentImpl.java	(revision 54509)
+++ impl/OMDocumentImpl.java	(working copy)
@@ -1,56 +1,56 @@
-package org.apache.axis.om.impl;
-
-import org.apache.axis.om.OMDocument;
-import org.apache.axis.om.OMElement;
-
-/**
- * Copyright 2001-2004 The Apache Software Foundation.
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * User: Eran Chinthaka - Lanka Software Foundation
- * Date: Oct 7, 2004
- * Time: 10:52:17 AM
- */
-public class OMDocumentImpl extends OMNodeImpl implements OMDocument {
-
-    private OMElementImpl root;
-    private OMXmlPullParserWrapper parserWrapper;
-
-    public OMDocumentImpl(OMXmlPullParserWrapper parserWrapper) {
-        this.parserWrapper = parserWrapper;
-    }
-
-    public OMElementImpl getRootElement() {
-        if (root == null) {
-            parserWrapper.next();
-        }
-        return root;
-    }
-
-    public void setRootElement(OMElementImpl root) {
-        this.root = root;
-    }
-
-    /**
-     * Get the root element of this document
-     *
-     * @return the root element
-     *
-     * This method should be changed as getRootElement
-     *
-     */
-    public OMElement getDocumentElement() {
-        return getRootElement();
-    }
-}
+package org.apache.axis.om.impl;
+
+import org.apache.axis.om.OMDocument;
+import org.apache.axis.om.OMElement;
+
+/**
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * User: Eran Chinthaka - Lanka Software Foundation
+ * Date: Oct 7, 2004
+ * Time: 10:52:17 AM
+ */
+public class OMDocumentImpl extends OMNodeImpl implements OMDocument {
+
+    private OMElementImpl root;
+    private OMXmlPullParserWrapper parserWrapper;
+
+    public OMDocumentImpl(OMXmlPullParserWrapper parserWrapper) {
+        this.parserWrapper = parserWrapper;
+    }
+
+    public OMElementImpl getRootElement() {
+        if (root == null) {
+            parserWrapper.next();
+        }
+        return root;
+    }
+
+    public void setRootElement(OMElementImpl root) {
+        this.root = root;
+    }
+
+    /**
+     * Get the root element of this document
+     *
+     * @return the root element
+     *
+     * This method should be changed as getRootElement
+     *
+     */
+    public OMElement getDocumentElement() {
+        return getRootElement();
+    }
+}
Index: impl/util/OMChildrenIterator.java
===================================================================
--- impl/util/OMChildrenIterator.java	(revision 0)
+++ impl/util/OMChildrenIterator.java	(revision 0)
@@ -0,0 +1,81 @@
+package org.apache.axis.om.impl.util;
+
+import org.apache.axis.om.OMNode;
+
+import java.util.Iterator;
+
+/**
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * User: Eran Chinthaka - Lanka Software Foundation
+ * Date: Oct 11, 2004
+ * Time: 11:23:07 AM
+ */
+public class OMChildrenIterator implements Iterator {
+
+    private OMNode currentChild;
+
+    public OMChildrenIterator(OMNode currentChild) {
+        this.currentChild = currentChild;
+    }
+
+    /**
+     * Removes from the underlying collection the last element returned by the
+     * iterator (optional operation).  This method can be called only once per
+     * call to <tt>next</tt>.  The behavior of an iterator is unspecified if
+     * the underlying collection is modified while the iteration is in
+     * progress in any way other than by calling this method.
+     *
+     * @throws UnsupportedOperationException if the <tt>remove</tt>
+     *                                       operation is not supported by this Iterator.
+     * @throws IllegalStateException         if the <tt>next</tt> method has not
+     *                                       yet been called, or the <tt>remove</tt> method has already
+     *                                       been called after the last call to the <tt>next</tt>
+     *                                       method.
+     */
+    public void remove() {
+        OMNode temp = currentChild.getNextSibling();
+        currentChild.detach();
+        currentChild = temp;
+    }
+
+    /**
+     * Returns <tt>true</tt> if the iteration has more elements. (In other
+     * words, returns <tt>true</tt> if <tt>next</tt> would return an element
+     * rather than throwing an exception.)
+     *
+     * @return <tt>true</tt> if the iterator has more elements.
+     */
+    public boolean hasNext() {
+        return (currentChild == null || currentChild.getNextSibling() == null);
+    }
+
+    /**
+     * Returns the next element in the iteration.
+     *
+     * @return the next element in the iteration.
+     * @throws java.util.NoSuchElementException
+     *          iteration has no more elements.
+     */
+    public Object next() {
+
+        if (hasNext()) {
+            currentChild = currentChild.getNextSibling();
+            return currentChild;
+        }
+        return null;
+
+    }
+}
